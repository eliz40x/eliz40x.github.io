<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Posts tagged memo - eliza.link</title>
        <link>https://eliza.link</link>
        <description><![CDATA[技術や読書録を残します]]></description>
        <atom:link href="https://eliza.link/tags/memo.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 07 Nov 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>音楽の文法</title>
    <link>https://eliza.link/posts/GrammarOfMusic.html</link>
    <description><![CDATA[<a href="/posts/GrammarOfMusic.html"><h2>音楽の文法</h2>
</a>
<ul class="article_data"><li>  Posted on November  7, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<p>部室に着く頃にはみんな荷物をもって待合室にむかっている頃で、誰も居なかった。</p>
<!--more-->
<p>少し家を出るのが遅かったかな、と急いで支度をしていると部長が部屋に入ってくる。気をつかってわたしが遅刻しかかっている事をとがめない。</p>
<p>私には部活動を続ける理由がわからなかった。なぜ朝早く集まって、夜遅くまで練習をするのか。後輩に聞かれでもしたらどうしようと思っていた。やる気がないわけではなかったが、全力を出しきれていない気がしてしかたがないのはきっとこのせいだろう。</p>
<p>急いで準備をする。サックスのネックをケースからとりだすと、ボディとの継ぎ目にグリースを塗る。次にコルクにグリースをたっぷり塗るとマウスピースをねじ込む。そしてネックをボディーに差し込んだあとストラップを取り付け首にさげる。最後にリガチャーのネジを締め、あらかじめ差し込んでおいたリードを固定する。</p>
<p>今日は楽器が冷たい。</p>
<p>楽器を首からぶら下げ、チューナーと楽譜を持つと何か忘れものはないか部室を見渡す。そうだ、今日は鞄も控室まで持っていかなくちゃな、とユニフォームと演奏会本番用の靴を鞄にほうりこみ、肩にさげる。</p>
<p>膝から嫌な感触がする。バスケットボールの授業で足をかけられてから調子が悪い。しかたないのでもう一方の足に力をいれる。部室の鍵をしめている部長の背中を意識しながら、自然に歩けているかな、と気にかける。</p>
<p>控室に入ると部員が数人居る。</p>
<p>「おはようございます」 「おはよう」</p>
<p>ブリネル硬さ試験機の横に鞄を置くと、後輩が話しかけてくる。</p>
<p>「今日は本番っすね」</p>
<p>今日は卒業生や地域の人が集まる一大コンサートだ。きっと親や知人もくる。このコンサートに出られるのは私にとって最後の機会だ。</p>
<p>顧問の指示で椅子を会場に出す。バケツリレーらしいが明らかに人がたりない。夜露にぬれてしまわないように部屋に運び込んでいた椅子を会場に引き出していく。椅子は持ちにくいけれど重さなんて大した事はない。こういう場合疲労の蓄積はどうなるんだろう。重く感じる場合はそれ相応の力が働いているんだろうか。</p>
<p>椅子が続々と並べられていく。脳が記憶上の資料をシークする。多分椅子は18×14で並んでいるはずだ。整列した椅子がパターンをもった模様に見える。</p>
<p>顧問がそろそろウォームアップをしようかと言うので私は楽器を抱えて部室に向う。楽器に息を通す。高音がかすれる。低温が揺れる。音程も出ない。最低音を鳴らし続けるが音に響きが感じられない。調子が悪い。</p>
<p>雲行きは怪しくなるばかりだ。</p>
<p>「合奏するぞ」</p>
<p>顧問に呼びかけられて会場に向う。ジャズバンドなら本番前の合奏はゲネプロだろうか、リハーサルだろうか。</p>
<p>ヒュウ、と風が吹く。風にのった雨がいくつか楽譜に丸いシミをつくる。しかたないので合奏を中止して昼食をとるようにと指示が入る。</p>
<p>雨が吹いているのにもかかわらず、卒業生の有志によるバンドは練習をはじめる。私は座席の最後尾で先輩方の演奏を聴く。私たちよりも少人数なのに力強いのはどうしてだろう。わかりきった事を考える。きっと今回もわからない。</p>
<p>「みんな大人ですね。」</p>
<p>隣の椅子に腰掛けた後輩が話しかけてくる。去年卒業した先輩がすごく大人に見える。在学中もそうだったんだろうか、それともスーツを着ているからだろうか。『社会に出たから』なんて答えは求めていない。先輩のイヤリングが目に入る、何かに引っかかって耳が裂けたりしないんだろうか。</p>
<p>鞄から珈琲を取り出す。苦いし複雑な味のこんなものをどうして私は好き好んで飲んでいるんだろうか。人間は味蕾という器官で味を感じていて、それが感じられる味はそれぞれ5種類しか無いといわれている。珈琲も分解すれば単純な味の集まりなんだろう。きっと私も音楽も単純な何かで構成されているんだと思う。単純だからといって簡単じゃないなぁ、と苦笑する。</p>
<p>音楽に文法はあるんだろうか。顧問がたまに口にする楽典の存在を思い出す。</p>
<p>「控室に入ってくれ」</p>
<p>顧問の奥さんが部員のために準備してくれたエナジードリンクを飲む。気持が高揚する。これはカフェインによるものだろうか。瓶の成分表示を見る。</p>
<p>「やっぱり見ますよね」</p>
<p>以前メトロノームの説明書を読んでいた時も同じ事を言われた気がする。無水カフェイン含有量は50mgだった。</p>
<p>「今回の演奏会、成功させましょう!」</p>
<p>形にならない、言葉にもならない気持ちは存在するのだろうか、それとも言葉にしたくないだけだろうか。</p>
<p>自分の座席につくと、去年と違って空席が目立つ。寒いからだろうか。だからといって私のする事は変わらない。突然、さっと日が射す。注意を払って、しかし、思い切って演奏をする。最後はリードミスが多発したが、これが私の精一杯だ。</p>
<p>「今回は中成功だな」</p>
<p>打ち上げ会は楽しい、顧問はいつも笑いながら花束よりもお菓子の差し入れの方が多いことをネタにする。今年はシュークリームの差し入れが多かった。私も大小計4つほど食べただろうか。すこし甘すぎるなぁ、と後輩と笑った。2Lペットボトルジュースの一気飲み対決が始まる。とつぜん顧問に呼ばれる。</p>
<p>「今日のソロはなかなかやったぞ、三年間のが報われたな」</p>
<p>顧問の手は大きくて、力強かった。</p>
<ul class="article_data"><li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
]]></description>
    <pubDate>Mon, 07 Nov 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/GrammarOfMusic.html</guid>
    <dc:creator>Eliza Calls</dc:creator>
</item>
<item>
    <title>型システム入門(TaPL)読書メモ</title>
    <link>https://eliza.link/posts/TaPL.html</link>
    <description><![CDATA[<a href="/posts/TaPL.html"><h2>型システム入門(TaPL)読書メモ</h2>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<p>TaPLでの読書メモが書いてあります随時追記していきます。 間違いを発見した場合はコメントか、me [at] eliza [dot] linkまでメールを下さると喜びます。</p>
<ol start="17" style="list-style-type: upper-alpha">
<li>どうして読むのか</li>
<li>Haskellが好きで背後で使われている技術を知りたくなったから</li>
</ol>
<p><a href="http://tapl.proofcafe.org/home">日本語のサポートページ</a>が準備されています。 また、<a href="https://estore.ohmsha.co.jp/titles/978427406911P">出版元のページ</a>から第一章が無料で読めます。</p>
<p>通読したのちにまた記事を書こうと思っています。</p>
<!--more-->
<h2 id="予備知識について">予備知識について</h2>
<p><a href="/posts/PreTaPL.html">このページに書いてあります</a></p>
<h2 id="tapl">TaPL</h2>
<blockquote>
<p>型システムとは、プログラミング言語の安全性や効率を高めるうえで重要な理論・手法です。本書は、その型システムについて基礎的な話題を網羅し、実装例を交えて丁寧に解説したThe MIT Press発行の解説書“Types And Programming Languages”（TAPL）を翻訳したものです。言語設計者や学生だけでなく、静的型付言語を深く理解して活用したいプログラマーにとっても貴重な情報となっています。 <a href="http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948" class="uri">http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
サポートサイトができたらジュンク堂トークのPDFも載ると思いますが、これだけは先に：型システム入門(TAPL)はとりあえず1,3,8,5,9,11章（＆2章の必要な部分）と、あとは好きな章を読めば「読んだ」ことにしても良いと思います！（60%本気）
</p>
— Eijiro Sumii (<span class="citation">@esumii</span>) <a href="https://twitter.com/esumii/status/315135694462939137">2013年3月22日</a>
</blockquote>
<h4 id="第1章-はじめに">第1章 はじめに</h4>
<p>型を導入する意義や、型についての面白い話が書かれています。</p>
<h4 id="第2章-数学的準備">第2章 数学的準備</h4>
<p><del>数学の公式や前提として必要な知識が列挙されています、ここで馴染の無い物があれば読むのを中断し、いちどその分野の知識を補うべきだとしていますが私は強行を決めました。</del></p>
<p>集合論の初歩を頭に入れておくと良い</p>
<h2 id="第1部-型無しの計算体系">第1部 型無しの計算体系</h2>
<h4 id="第3章-型無し算術式">第3章 型無し算術式</h4>
<!-- - 操作的意味論: 抽象機械を定義してプログラミング言語の振舞いを規定、機械の振舞いを遷移関数を使用して定義する。 -->
<!-- - 表示的意味論: 項を数値や関数として捉えてモデル化。 -->
<!-- - 公理的意味論: 言語の定義そのものが法則となる、項の意味は項の照明そのもの。 -->
<ul>
<li>正規形
<ul>
<li>もう項が評価できない、という意味である。 <code>if t1 then t2 else t3</code> は評価できるが、 <code>true</code> はもう評価できない。</li>
<li><del>正規形であるならば値である。</del></li>
<li>項が正規形であるにかかわらず値ではない場合を『行き詰まり状態』と言う。</li>
<li>すべての項に対して、ある正規形が存在する</li>
</ul></li>
<li>多ステップ評価
<ul>
<li>1ステップ評価を合成したやつだと理解しておいた。</li>
</ul></li>
</ul>
<h4 id="第4章-算術式のml実装">第4章 算術式のML実装</h4>
<p>なんとなく実装してみたのでGithubにアップロードしました。</p>
<p><a href="https://github.com/eliza0x/Hatter">eliza0x/Hatter</a></p>
<h4 id="第5章-型無しラムダ計算">第5章 型無しラムダ計算</h4>
<ul>
<li>なんとなく分かったら、<a href="http://tarao.hatenablog.com/entry/20100208/1265605429">ラムダ計算基礎文法最速マスター</a>にあっさりと書かれているので読むといいかも。</li>
<li><span class="math inline">\(\lambda\)</span>(Lambda)計算
<ul>
<li>全ての計算が関数定義と関数適用で表される(trueやfalse、数も関数!)</li>
<li>複雑なプログラミング言語のエッセンスは小さな核となる計算の集まりとして定式化できる、という事で生まれた。</li>
</ul></li>
<li>Lambda計算はプログラミング言語であると共に証明可能な数学的対象。</li>
<li>Lambda計算に似たようなものに<span class="math inline">\(\pi\)</span>計算やオブジェクト計算がある(本書では扱わないらしいが)
<ul>
<li><dl>
<dt><a href="http://web.yl.is.s.u-tokyo.ac.jp/kobalab/kadai99/picalc.html">π-calculus 超入門</a></dt>
<dd>もしかしてアクターモデルの原点？
</dd>
</dl></li>
</ul></li>
<li>自由変数の無い項を「閉じている」もしくは「コンビネータ」という。
<ul>
<li><span class="math inline">\(\lambda x.\; x\)</span> 例えばこの恒等関数はコンビネータである。</li>
<li><span class="math inline">\(\lambda x.\; y\)</span> この項はコンビネータではない。</li>
</ul></li>
<li><span class="math inline">\((\lambda x.\; x) y\)</span> は <span class="math inline">\(y\)</span> と評価される。</li>
<li>項 <span class="math inline">\((\lambda x.\; x\; (\lambda x.\; x))\; (u\; r)\)</span> は <span class="math inline">\(u\; r\; (\lambda x.\; x)\)</span> と評価される。
<ul>
<li>この操作をベータ簡約といい、簡約可能な項を簡約基と言う。</li>
</ul></li>
<li>ラムダ計算の評価戦略は数種類あり、プログラミング言語によっても違う。
<ul>
<li>Haskellは名前呼び戦略の変種である必要呼び戦略</li>
<li>大多数の言語では値呼び戦略</li>
</ul></li>
<li>以下は名前呼び簡約の例です。</li>
</ul>
<p><span class="math display">\[
\quad         \underline{ id\;(id\;(\lambda z.\; id\; z)) }\\ 
\rightarrow\; \underline{ id\;(\lambda z.\; id\; z) }\\
\rightarrow\; \lambda z.\; id\; z\\
\nrightarrow
\]</span></p>
<ul>
<li>以下は値呼び簡約の例です。</li>
</ul>
<p><span class="math display">\[
\quad\;       id\;(\underline{ id\;(\lambda z.\; id\; z)})\\
\rightarrow\; \underline{id\;(\lambda z.\; id\; z) }\\
\rightarrow\; \lambda z.\; id\; z\\
\nrightarrow
\]</span></p>
<ul>
<li>値呼び評価は「正格」名前呼び戦略は「非正格」もしくは「遅延評価」と呼ばれる。</li>
<li>純粋なラムダ計算でもブール値や数の表現、またその評価は出来る
<ul>
<li>純粋なラムダ計算ではTrueとFalseを以下のように表現する。</li>
<li><span class="math inline">\(true\; =\; \lambda t.\; \lambda f.\; t;\\false\; =\; \lambda t.\; \lambda f.\; f;\)</span></li>
<li>面倒、なので必要に応じて拡張して使ったりする。</li>
<li>関数定義と関数適用で数をどのように表すかというとチャーチ数というものがある。</li>
</ul></li>
<li>正規形に評価できない項が存在する。
<ul>
<li><span class="math inline">\(omega\; =\; (\lambda x. x\; x)\; (\lambda x. x\; x);\)</span></li>
<li>簡約基を一つだけ持っているが、簡約すると<span class="math inline">\(omega\)</span>そのものになるためである。</li>
<li>これを発散という。</li>
</ul></li>
<li><span class="math inline">\(omega\)</span>コンビネータには不動点コンビネータと呼ばれる一般化がある。
<ul>
<li>Haskellが分かるならtanakh氏の<a href="http://d.hatena.ne.jp/tanakh/20040813">不動点演算子</a>の記事が面白いかも。</li>
</ul></li>
</ul>
<h4 id="第6章-項の名無し表現">第6章 項の名無し表現</h4>
<ul>
<li><a href="http://ryna4c2e.hatenablog.com/entry/20141023/1414077068">de Bruijn indexについての備忘録</a>が参考になると思います。</li>
<li>代入等を可能にするため、変数に適宜新しい名前を与えたい。</li>
<li>そのためには様々な方法があります。
<ul>
<li>本著では「de Bruijinインデックス」<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>を使用しています。</li>
</ul></li>
<li>de Bruijinインデックス
<ul>
<li>変数を名前から解放したい。</li>
<li>束縛しているLambdaからどれだけ遠い(深い)かを自然数で表します。</li>
<li>例
<ul>
<li><span class="math inline">\(\lambda x.\; x \Rightarrow \lambda .\; 0\)</span></li>
<li><span class="math inline">\(\lambda x.\lambda y.\; y\; x \Rightarrow \lambda.\lambda. \; 0\; 1\)</span></li>
<li><span class="math inline">\(foo = (\lambda x. (\lambda x. x)) (\lambda x. x); \Rightarrow foo = (\lambda .\lambda . 0) (\lambda . 0);\)</span></li>
<li><span class="math inline">\(\lambda\)</span> の数より多い数値の場合、自由変数を指す。例えば <span class="math inline">\(\lambda .1\; 0\)</span> の <span class="math inline">\(1\)</span> は自由変数</li>
</ul></li>
<li>名無し項より自由変数を含むかどうか判別が簡単。</li>
<li>実装が間違えていた場合壊滅的に失敗する、これはバグを発見しやすいというメリットになります。なので本書ではde Bruijinインデックスを採用しています。</li>
</ul></li>
<li>シフト
<ul>
<li>de Bruijinインデックスを導入すると、代入の際自由変数のみインデックスを変更する必要が出てくる。</li>
</ul></li>
</ul>
<p>自由変数にインデックスを割り当てます。 <span class="math display">\[
\gamma =    foo \mapsto 2 \\
\qquad      bar \mapsto 1 \\
\qquad\quad z   \mapsto 0
\]</span></p>
<p>Lambda式です。 <span class="math display">\[
foo = \lambda x. \lambda y. z \\
bar = \lambda x. foo\; x
\]</span></p>
<p>変数をde Bruijinインデックスで表現します。 <span class="math display">\[
foo = \lambda . \lambda . 2 \\
bar = \lambda . 3\; 0
\]</span></p>
<p><code>foo</code>をインライン化します。 <code>bar</code>のLambdaの一つ内側に入る訳ですから、1個シフトする必要があります。<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<p><span class="math display">\[
bar = \lambda . (\lambda . \lambda . 3)\; 0
\]</span></p>
<p><span class="math inline">\(\beta\)</span>簡約をしましょう。Lambdaが一つ減るたびに、インデックスを一小さくする必要があります。</p>
<p><span class="math display">\[
bar = \lambda . \lambda . 2
\]</span></p>
<!-- #### 第7章	ラムダ計算のML実装 -->
<h2 id="第2部-単純型">第2部 単純型</h2>
<h4 id="第8章-型付き算術式">第8章 型付き算術式</h4>
<ul>
<li>進行定理
<ul>
<li>正しく型付けされた項は行き詰まり状態に陥らない。</li>
</ul></li>
<li>保存定理
<ul>
<li>正しく型付けされた項が評価できるならば、評価後の項も正しく型付けされている。</li>
</ul></li>
<li>以上二つの定理を満たしたものを型安全<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>である、と言われる。</li>
</ul>
<h4 id="第9章-単純型付きラムダ計算">第9章 単純型付きラムダ計算</h4>
<ul>
<li>Lambda抽象を型として扱う<span class="math inline">\(\rightarrow\)</span>型
<ul>
<li>これだと<span class="math inline">\((\lambda x. 0) true\)</span>のような時に型がつけられない</li>
<li>これでは書きたいプログラムに型が割り当てられないことが多々ある</li>
</ul></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">foo <span class="fu">=</span> <span class="kw">if</span> <span class="fu">&lt;</span>長く複雑な式<span class="fu">&gt;</span>
	<span class="kw">then</span> true
	<span class="kw">else</span> print <span class="st">&quot;ERROR&quot;</span></code></pre></div>
<p>このHaskellのプログラムでは型エラーでコンパイルが通らない。</p>
<blockquote>
<p>ラムダ計算はチューリング完全なので正格な型解析は不可能である – P. 75 9.1章</p>
</blockquote>
<ul>
<li><dl>
<dt>ちょっとよく分からない</dt>
<dd><span class="math inline">\(omega\)</span>等発散してしまう場合に無限を扱えないため？
</dd>
</dl></li>
<li>型付きラムダ計算は<span class="math inline">\(\lambda _\rightarrow\)</span>と表記される_</li>
<li>導入規則: その型の要素がどのように作られるか</li>
<li>除去規則: その型の要素がどのように使われるか</li>
<li>論理学と型理論のふしぎな関連はCurry-Howard対応<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>として知られている
<ul>
<li><a href="https://ja.wikibooks.org/wiki/Haskell/%E3%82%AB%E3%83%AA%E3%83%BC%3D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B">Haskell/カリー=ハワード同型</a>が面白い</li>
</ul></li>
<li>カリー・ハワード同型対応入門もわかりやすかった
<ul>
<li>第一回: <a href="http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward.pdf" class="uri">http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward.pdf</a></li>
<li>第二回: <a href="http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward2.pdf" class="uri">http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward2.pdf</a></li>
</ul></li>
<li>型注釈は評価においてはなんの役割も果たさない</li>
<li>たいていのプログラムは実行時に型無しの項にもどされる
<ul>
<li><a href="https://kagamilove0707.github.io/programming/2014/02/20/about-phantom-type/">型安全なリストを作るのです(｀・ω・´) ～ その1、Phantom Type（幽霊型）入門ですー＞ω＜</a>が面白い</li>
</ul></li>
</ul>
<!-- #### 第10章	単純型のML実装 -->
<h4 id="第11章-単純な拡張">第11章 単純な拡張</h4>
<ul>
<li></li>
</ul>
<!--
  #### 第12章	正規化
  #### 第13章	参照
  #### 第14章	例外
  
  ## 第3部	部分型付け
  #### 第15章	部分型付け
  #### 第16章	部分型付けのメタ理論
  #### 第17章	部分型付けのML実装
  #### 第18章	事例：命令的オブジェクト
  #### 第19章	事例：Featherweight Java
  
  ## 第4部	再帰型
  #### 第20章	再帰型
  #### 第21章	再帰型のメタ理論
  
  ## 第5部	多相性
  #### 第22章	型再構築
  #### 第23章	全称型
  #### 第24章	存在型
  #### 第25章	System F のML実装
  #### 第26章	有界量化
  #### 第27章	事例：命令的オブジェクト再考
  #### 第28章	有界量化のメタ理論
  
  ## 第6部	高階の型システム
  #### 第29章	型演算子とカインド
  #### 第30章	高階多相
  #### 第31章	高階部分型付け
  #### 第32章	事例：純粋関数的オブジェクト
  
  ## 付録A	演習の解答
  ## 付録B	記法
-->
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>「de Brujin項」とも呼ばれるそうです。日本語ではド ブラウンと読むのが一番近いそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>数式に起こすと <span class="math inline">\(\uparrow ^2 (\lambda . \lambda . 2)\)</span><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>健全性とも言われる<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Curry-Howard同型ともよばれる<a href="#fnref4">↩</a></p></li>
</ol>
</div>
<ul class="article_data"><li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/TaPL.html</guid>
    <dc:creator>Eliza Calls</dc:creator>
</item>
<item>
    <title>TaPLに必要な知識の学習記録</title>
    <link>https://eliza.link/posts/PreTaPL.html</link>
    <description><![CDATA[<a href="/posts/PreTaPL.html"><h2>TaPLに必要な知識の学習記録</h2>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<p>TaPLを読むのために少し勉強したのでメモを残しておきます。 内容の真偽の保証はできません。必要に応じて追記していきます。</p>
<p><a href="http://zoetrope.hatenablog.jp/entry/2013/07/24/204613">数学初心者のための「型システム入門」入門</a>によると前提として以下の知識が必要になるようです。</p>
<blockquote>
<ul>
<li>数学(離散数学、アルゴリズム、論理学)</li>
<li>高階関数型プログラミング言語(Scheme、ML、Haskellなど)</li>
<li>コンパイラの基礎的な概念(抽象構文、BNF文法、評価、抽象機械など)</li>
</ul>
</blockquote>
<p>TaPLの読書記録は<a href="/posts/TaPL.html">このページ</a>に載っています。</p>
<!--more-->
<h2 id="論理学">論理学</h2>
<ul>
<li><a href="http://abelard.flet.keio.ac.jp/person/mitsu/pdf/nyumon_logic.pdf">「論理学入門」講義ノート</a>が論理学で検索してヒットしたものの中で一番容易に読み進めることができそうだったので読み流した(証明は追いかけるの面倒だったので飛ばした)。</li>
<li>記号がダメな人はアレルギーをおこしそうな分野でした、印刷したテキストをうっかり直視した友人は帰らぬ人となりました。(まあプログラマは大丈夫だと思う)</li>
<li>後日みつけた資料ですが、こちらのほうが易しく書かれています。 <a href="http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf" class="uri">http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf</a></li>
</ul>
<h2 id="集合論">集合論</h2>
<p>論理学とあわせて、何かを表現する際の述語を勉強している気分です。</p>
<ul>
<li>TaPLの冒頭に集合がなんだかんだと書かれていたので勉強が必要だと思い、<a href="http://www.math.twcu.ac.jp/~yamauchi/text/2012/alg2012/set_logic.pdf">東京女子大学の代数学IA(集合と論理)のテキスト</a>を読んでみました。
<ul>
<li>私の環境では途中で組版がすこし崩れています。</li>
<li>これを読むのは論理学のテキストを読んだ後が良いです。</li>
</ul></li>
<li>「集合・位相入門」を今読んでいます。 <a href="https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html" class="uri">https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html</a></li>
</ul>
<h2 id="離散数学">離散数学</h2>
<p>いつかやりたいなぁ…</p>
<h2 id="ラムダ計算">ラムダ計算</h2>
<ul>
<li><a href="http://language-and-engineering.hatenablog.jp/entry/20130313/LambdaCalculusBasicNoteLinks">「ラムダ計算」を独学で学習するための，講義ノートやPDFのリンク集 （復習用の問題付き）</a>に詳しくまとまっています。</li>
</ul>
<h2 id="アルゴリズム">アルゴリズム</h2>
<p>ダメです。</p>
<h2 id="高階関数型プログラミング言語">高階関数型プログラミング言語</h2>
<ul>
<li>まあまあHaskellが書けるので問題はなさそうと慢心。TaPLのサンプルコードはOCaml(MLの方言)で書かれていました。</li>
<li>Haskellで書かれたサンプルコードは <a href="https://github.com/zerokarmaleft/tapl-haskell" class="uri">https://github.com/zerokarmaleft/tapl-haskell</a> ここにありました。さまざまな言語に有志が翻訳しています。</li>
<li>サンプルコードの実装にパーサを書かなければいけないみたいなので、ekmett氏の<a href="http://hackage.haskell.org/package/trifecta">trifecta</a>を使っています。</li>
</ul>
<ul class="article_data"><li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/PreTaPL.html</guid>
    <dc:creator>Eliza Calls</dc:creator>
</item>
<item>
    <title>劣等感を感じる自分について</title>
    <link>https://eliza.link/posts/ZenMind.html</link>
    <description><![CDATA[<a href="/posts/ZenMind.html"><h2>劣等感を感じる自分について</h2>
</a>
<ul class="article_data"><li>  Posted on August 17, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<p><a href="http://kosen14s.github.io/">Kosen14s</a>の人達は知っていると思うけれど、私は驚くほど英語が出来ない。中学時代にまったく勉強をしなかったので、それ以前から学んでいた数学や国語はまあまあ出来るけど、中学から習い始めた英語は壊滅的だ。</p>
<!--more-->
<p>そのおかげで、こう言っては同学の人達に失礼だけれど賢くない高校に入学せざるをえなかった。しかも工業高校だ。 おかげで私の脳味噌はすっからかんだ。授業の半分が先生の中身の無い雑談でなくなるような授業を三年うけていたからね。</p>
<p>白状しよう、私は勉強ができない事に非常に劣等感をもっている。</p>
<p>私はプログラミングが好きだ。楽しいから？怪しい。</p>
<p>プログラミングを始めた原因はなんとなくカッコよかったからだ。プログラミングをはじめた頃は作業の大半の時間をWikipediaで潰していた気がする、ようするに好きじゃなかったんだ。 プログラミングを始めた理由なんて今となっては分からないけれど、カッコよくみえたのは、頭がよさそうにだったからかも知れない。天才ハッカーってね。</p>
<p>それでもダラダラとプログラミングは続けた。ただただ「同級生は出来ないけれど私にはプログラミングが出来る」という根拠の無い自信で劣等感におしつぶされそうな自分の心の平衡を保っていた。</p>
<p>今でこそ楽しんでプログラミングをしているけど、純粋に楽しんでいるかは分からない。 楽しいかどうかなんて心の問題だと思うので大した問題じゃないだろう、とも思う。</p>
<p>結局他人と比べるから劣等感を持ったり悩んだりするんだ。</p>
<p>そして劣等感に悩む自分が出した解決策が“Zen”だ。 たいしてネーミングに意味は無い、なんとなく禅っぽいものだからZenだ。<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>「謙虚になれ」「こんな下らないことに心を動かされるとは情けない」「何かに依存するな」</p>
<p>何でも自分と比較して物事を見るのを辞めた。素直になった。 ごめん、嘘言った。素直になろうと思う。</p>
<p>しまりの無い記事になってしまった。</p>
<p>さあ、Zen Mindを手に入れた次は努力して勉強だ。根本から悩む原因を解決するのだ。</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>そもそも禅とは何かを良くしらない<a href="#fnref1">↩</a></p></li>
</ol>
</div>
<ul class="article_data"><li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
]]></description>
    <pubDate>Wed, 17 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/ZenMind.html</guid>
    <dc:creator>Eliza Calls</dc:creator>
</item>

    </channel>
</rss>
