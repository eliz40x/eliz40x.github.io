<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>All posts -  | ELIZA.link</title>
        <link>https://eliza.link</link>
        <description><![CDATA[技術録や日記を残します]]></description>
        <atom:link href="https://eliza.link/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 29 Jun 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Haskellでバブルソートを書く</title>
    <link>https://eliza.link/posts/bubble_sort_haskell.html</link>
    <description><![CDATA[<a href="/posts/bubble_sort_haskell.html"><h1>Haskellでバブルソートを書く</h1>
</a>
<ul class="article_data"><li>  Posted on June 29, 2017</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/programming.html">programming</a></li>
</ul>
<section class="article_text"><p>部長からの挑戦状に応える形で、バブルソートを書いてみました。これはそのときの記録です。</p>
<p>普通のバブルソートを書くだけではあまり面白くないですから、入出力を含めて一行ですべてすませるプログラムを書いてみることにします。</p>
<!--more-->
<h2 id="バブルソートとは">バブルソートとは？</h2>
<p>Wikipediaの<a href="https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88">バブルソート</a>を読めばいいと思います。ざっくりと説明すると、リストの隣り合った要素同士を次々と比較していくとソート出来る。というアルゴリズムだそうです。</p>
<h2 id="ふつうに書いてみる">ふつうに書いてみる</h2>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Environment</span> (getArgs)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  input <span class="ot">&lt;- getArgs ::</span> <span class="dt">IO</span> [<span class="dt">String</span>]
  print <span class="fu">.</span> bubble <span class="fu">.</span> map toInt <span class="fu">$</span> input
  <span class="kw">where</span>
    toInt <span class="fu">=</span><span class="ot"> read ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>

<span class="ot">bubble ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble l <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> bubble1 l
           <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l <span class="kw">then</span> l 
                        <span class="kw">else</span> bubble s

<span class="ot">bubble1 ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble1 (l<span class="fu">:</span>m<span class="fu">:</span>n) <span class="fu">=</span> min l m <span class="fu">:</span> bubble1 (max l m <span class="fu">:</span> n)
bubble1 x <span class="fu">=</span> x</code></pre></div>
<pre><code>$ ghc -O2 bubble_normal.hs
$ ./bubble_normal 1 2 4 2 1 9 3 1 7 9 10 3 2 4 2
[1,1,1,2,2,2,2,3,3,4,4,7,9,9,10]</code></pre>
<p>うまくうごいていますね。</p>
<h2 id="簡単な解説">簡単な解説</h2>
<p>やっていることは単純です、上から順に解説していきます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  input <span class="ot">&lt;- getArgs ::</span> <span class="dt">IO</span> [<span class="dt">String</span>]
  print <span class="fu">.</span> bubble <span class="fu">.</span> map toInt <span class="fu">$</span> input
  <span class="kw">where</span>
    toInt <span class="fu">=</span><span class="ot"> read ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></code></pre></div>
<p><code>main</code>関数では、<code>getArgs</code>でコマンドライン引数を受け取ったあと、<code>map toInt</code>で文字型のリストを整数型のリストに変換したものを、後に定義する予定である<code>bubble</code>関数でソートしたのち、<code>print</code>関数で出力しています。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bubble ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble l <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> bubble1 l
           <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l <span class="kw">then</span> l 
                        <span class="kw">else</span> bubble s</code></pre></div>
<p><code>bubble</code>関数では、受け取ったリストが変化しなくなるまで<code>bubble1</code>を繰り返す、という関数になっています。もしリストを<code>bubble1</code>に適用しても変化しないと言う事は何度<code>bubble1</code>に繰り返し適用したとしてももう変化しないと言うことで、<code>bubble1</code>が望ましい動作をするならば、そのリストは整列済みであるということです。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bubble1 ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble1 (l<span class="fu">:</span>m<span class="fu">:</span>n) <span class="fu">=</span> min l m <span class="fu">:</span> bubble1 (max l m <span class="fu">:</span> n)
bubble1 x <span class="fu">=</span> x</code></pre></div>
<p>このコードの肝である、<code>bubble1</code>関数です。といっても単純な定義で、<code>max</code>は与えられた二つの引数のうち大きな値を返す関数、<code>min</code>は小さな値を返す関数です。この操作で、リストを端からふたつづつ、ひとつズレで舐めていきます。</p>
<p>これらの単純な関数を組み合わせることで、このコードではバブルソートを実現しています。</p>
<h2 id="もっと短いコードで書くための下処理">もっと短いコードで書くための下処理</h2>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Environment</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> print <span class="fu">.</span> bubble <span class="fu">.</span> map (read<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">=&lt;&lt;</span> getArgs

<span class="ot">bubble ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble <span class="fu">=</span> \l <span class="ot">-&gt;</span> <span class="kw">let</span> s <span class="fu">=</span> bubble1 l
                <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l 
                     <span class="kw">then</span> l 
                     <span class="kw">else</span> bubble s

<span class="ot">bubble1 ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble1 <span class="fu">=</span> \list <span class="ot">-&gt;</span> <span class="kw">if</span> length list <span class="fu">&gt;=</span> <span class="dv">2</span> 
                     <span class="kw">then</span> (\(l<span class="fu">:</span>m<span class="fu">:</span>n) <span class="ot">-&gt;</span> min l m <span class="fu">:</span> bubble1 (max l m <span class="fu">:</span> n)) list
                     <span class="kw">else</span> list</code></pre></div>
<p>取り敢えず、<code>main</code>関数を一行で、後の作業のための前処理のために、関数をlambda式でかきなおします。このコードでは、先程存在した<code>toInt</code>関数を、そのまま<code>main</code>関数の中にうめこんでしまいました。これから<code>bubble</code>と<code>bubble1</code>にたいしてこの作業を行っていきます。</p>
<p>埋め込む際に問題になるのは、再起表現です。これを解決するために不動点コンビネータを導入します。不動点コンビネータについての解説は、Wikibooksの<a href="https://ja.wikibooks.org/wiki/Haskell/%E4%B8%8D%E5%8B%95%E7%82%B9%E3%81%A8%E5%86%8D%E5%B8%B0">Haskell/不動点と再帰</a>かWikipediaの<a href="https://ja.wikipedia.org/wiki/%E4%B8%8D%E5%8B%95%E7%82%B9%E3%82%B3%E3%83%B3%E3%83%93%E3%83%8D%E3%83%BC%E3%82%BF">不動点コンビネータ</a>を読めばいいとおもいます。</p>
<p>実際に不動点コンビネータで書き直したものが以下のコードです。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Environment</span> (getArgs)
<span class="kw">import </span><span class="dt">Control.Monad.Fix</span> (fix)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> print <span class="fu">.</span> bubble <span class="fu">.</span> map (read<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">=&lt;&lt;</span> getArgs

<span class="ot">bubble ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble <span class="fu">=</span> fix <span class="fu">$</span> 
  \rec l <span class="ot">-&gt;</span> <span class="kw">let</span> s <span class="fu">=</span> bubble1 l
            <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l <span class="kw">then</span> l <span class="kw">else</span> rec s

<span class="ot">bubble1 ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]
bubble1 <span class="fu">=</span> fix <span class="fu">$</span> 
  \rec list <span class="ot">-&gt;</span> <span class="kw">if</span> length list <span class="fu">&gt;=</span> <span class="dv">2</span> 
                 <span class="kw">then</span> (\(l<span class="fu">:</span>m<span class="fu">:</span>n) <span class="ot">-&gt;</span> min l m <span class="fu">:</span> rec (max l m <span class="fu">:</span> n)) list
                 <span class="kw">else</span> list</code></pre></div>
<p>ほとんど書き換えることなく<code>fix</code>で再帰を表現することができました。これで<code>bubble</code>や<code>bubble1</code>内に自身の名前が登場することはありません、早速<code>main</code>内に埋め込んでみましょう。</p>
<h2 id="一行でバブルソートを書く">一行でバブルソートを書く</h2>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Environment</span> (getArgs)
<span class="kw">import </span><span class="dt">Control.Monad.Fix</span> (fix)

main <span class="fu">=</span> print <span class="fu">.</span> bubble <span class="fu">.</span> map (read<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">=&lt;&lt;</span> getArgs

b <span class="fu">=</span> (fix <span class="fu">$</span> \rec l <span class="ot">-&gt;</span> <span class="kw">let</span> s <span class="fu">=</span> bubble1 l <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l 
        <span class="kw">then</span> l <span class="kw">else</span> rec s)

b1 <span class="fu">=</span> (fix <span class="fu">$</span> \rec&#39; ls&#39; <span class="ot">-&gt;</span> <span class="kw">if</span> length ls&#39; <span class="fu">&gt;=</span> <span class="dv">2</span> 
        <span class="kw">then</span> (\(l&#39;<span class="fu">:</span>m&#39;<span class="fu">:</span>n&#39;) <span class="ot">-&gt;</span> min l&#39; m&#39; <span class="fu">:</span> rec (max l&#39; m&#39; <span class="fu">:</span> n&#39;)) ls&#39; 
        <span class="kw">else</span> ls&#39;)</code></pre></div>
<p>最後にこれらを埋め込みます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Environment</span> (getArgs)
<span class="kw">import </span><span class="dt">Control.Monad.Fix</span> (fix)

main <span class="fu">=</span> print <span class="fu">.</span> (fix <span class="fu">$</span> \rec l <span class="ot">-&gt;</span> <span class="kw">let</span> s <span class="fu">=</span> (fix <span class="fu">$</span> \rec&#39; ls&#39; <span class="ot">-&gt;</span> <span class="kw">if</span> length ls&#39; <span class="fu">&gt;=</span> <span class="dv">2</span> <span class="kw">then</span> (\(l&#39;<span class="fu">:</span>m&#39;<span class="fu">:</span>n&#39;) <span class="ot">-&gt;</span> min l&#39; m&#39; <span class="fu">:</span> rec (max l&#39; m&#39; <span class="fu">:</span> n&#39;)) ls&#39; <span class="kw">else</span> ls&#39;) l <span class="kw">in</span> <span class="kw">if</span> s <span class="fu">==</span> l <span class="kw">then</span> l <span class="kw">else</span> rec s) <span class="fu">.</span> map (read<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">=&lt;&lt;</span> getArgs</code></pre></div>
<p>できました、<code>import foobar</code>部を除くと確かに一行です。絶対に読みたくないコードですね。</p>
<pre><code>./bubble_oneline 1 9 2 9 1 9 3 7 1 9 3 2
[1,1,1,2,2,3,3,7,9,9,9,9]</code></pre>
<p>確かに動いていますね。これで部長に大きな顔ができそうです。</p></section>
]]></description>
    <pubDate>Thu, 29 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/bubble_sort_haskell.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>プログラミングコンテストに初参加した</title>
    <link>https://eliza.link/posts/atcoder_fimp.html</link>
    <description><![CDATA[<a href="/posts/atcoder_fimp.html"><h1>プログラミングコンテストに初参加した</h1>
</a>
<ul class="article_data"><li>  Posted on May 14, 2017</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/kosen14s.html">kosen14s</a>, <a href="/tags/programming.html">programming</a></li>
</ul>
<section class="article_text"><p>昨日はじめてプログラミングコンテストに参加しました<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>。Atcoder Beginner Contest 061です。一問も解けませんでした。 <!--more--></p>
<h2 id="どうして始めたか">どうして始めたか</h2>
<p>もともと私はHaskellやSchemeが好きで、プログラミングコンテストは興味が無いというふうにしておいたほうが良い、という状況でした。なんとなく興味はずっと持っていたので、機会<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>もあり、競技プログラミングのチームに加入しました。</p>
<h2 id="なにがあったか">なにがあったか</h2>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> () 
main <span class="fu">=</span> <span class="kw">do</span>
  [a, b, c] <span class="ot">&lt;-</span> words <span class="fu">&lt;$&gt;</span> getLine
  putStrLn <span class="fu">$</span> <span class="kw">if</span> (c <span class="fu">&gt;=</span> a) <span class="fu">&amp;&amp;</span> (c <span class="fu">&lt;=</span> b) <span class="kw">then</span> <span class="st">&quot;Yes&quot;</span> <span class="kw">else</span> <span class="st">&quot;No&quot;</span></code></pre></div>
<p>一見正しそうにみえますが、<code>a, b, c</code>の型に注目すると、String型であることに気がつくでしょう。じゃあ何故比較できているか、StringはOrdのインスタンスなんですね、型は或る種の間違いは防いでくれるがStringは比較できてしまった。</p>
<p><strong>型注釈は書こう！</strong></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> () 
main <span class="fu">=</span> <span class="kw">do</span>
  [a, b, c] <span class="ot">&lt;-</span> map toInt <span class="fu">.</span> words <span class="fu">&lt;$&gt;</span> getLine
  putStrLn <span class="fu">$</span> <span class="kw">if</span> (c <span class="fu">&gt;=</span> a) <span class="fu">&amp;&amp;</span> (c <span class="fu">&lt;=</span> b) <span class="kw">then</span> <span class="st">&quot;Yes&quot;</span> <span class="kw">else</span> <span class="st">&quot;No&quot;</span>
  <span class="kw">where</span>
  toInt <span class="fu">=</span><span class="ot"> read ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></code></pre></div>
<p>これが正しいコードです。</p>
<p>ふだん使わない関数も沢山使えて面白かったですね、普段は<code>&amp;&amp;&amp;</code>や<code>replicate</code>なんて使わないのですが。</p>
<p>純粋関数型のHaskellは入出力に苦労する、と思われているかもしれませんが今回問題に出た「一行目で渡された回数だけ入力を受け取る」なんてのも案外素直に書けてしまいます。もしかすると命令型言語よりも綺麗に書けているのではないでしょうか。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  [n, m] <span class="ot">&lt;-</span> map toInt <span class="fu">.</span> words <span class="fu">&lt;$&gt;</span> getLine
  xs <span class="ot">&lt;-</span> mapM (\_ <span class="ot">-&gt;</span> getLine) [<span class="dv">1</span><span class="fu">..</span>n]<span class="ot"> ::</span> <span class="dt">IO</span> [<span class="dt">String</span>]
  mapM_ putStrLn xs
  <span class="kw">where</span>
  toInt <span class="fu">=</span><span class="ot"> read ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></code></pre></div>
<h2 id="おもしろかった">おもしろかった</h2>
<p>例題は通るのですが、ACできない。他の問題もきっと問題文をきちんと理解できていないような気がします。はじめは問題をC++で解こうとしていたのですが、まったくアルゴリズムが思いつかない。しかたなくHaskellに切り換えると思いつく、といったふうでしたから、プログラミング言語に思考は縛られているんだという実感をえることができました。もっとC++をかけるようにならなくちゃならない<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>。くやしいので来週のコンテストにも参加します。</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>これは半分ぐらい正しくなくて、一度だけ飛び入り参加で爆死したことがある<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>大学の学生プロジェクトが存在する<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>実行速度云々以前に、Haskellが使えないコンテストにもチームで参加するため<a href="#fnref3">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Sun, 14 May 2017 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/atcoder_fimp.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Kosen14s x Publicに参加してきた</title>
    <link>https://eliza.link/posts/kx_lt.html</link>
    <description><![CDATA[<a href="/posts/kx_lt.html"><h1>Kosen14s x Publicに参加してきた</h1>
</a>
<ul class="article_data"><li>  Posted on May  7, 2017</li>

<li> Tags: <a href="/tags/kosen14s.html">kosen14s</a></li>
</ul>
<section class="article_text"><p>Kosen14s x Publicに参加してきました。わたしが参加しているKosen14sが主催でLTをやるということで、これは参加するしかないだろう、ということです。</p>
<!--more-->
<h2 id="それでkosen14sってなんなの">それでKosen14sってなんなの</h2>
<p>その質問にこれまで散々悩んできたのですが、ずっと答えが出ませでした。が、ついに、ふるつきくんが結論を出してくれました。</p>
<p><strong>わいわい集まって騒ぐための名目</strong></p>
<p>人はお花見と言う名目でお酒をのんではハロウィンで仮装パーティーをするのでKosen14sもそういうことでしょう。</p>
<p>もういちど彼の言葉を借りると</p>
<p><strong>kosen14sはごらく部でKosen14s x Publicはゆるゆりなちゅやちゅみのようなもの</strong></p>
<p>だそうです、本当にありがとうございました。</p>
<h2 id="それでいいのか">それでいいのか</h2>
<p>よくないきがする</p>
<h2 id="電車">電車</h2>
<p>乗り換えが難しすぎる</p>
<h2 id="発表について">発表について</h2>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
<a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a> オープニングでループ再生していた動画 <a href="https://t.co/uDQVPiQf3K">pic.twitter.com/uDQVPiQf3K</a>
</p>
— ちげ (<span class="citation">@Technictige</span>) <a href="https://twitter.com/Technictige/status/860394877636313089">2017年5月5日</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>開始時のこの会と会場についての説明で、スライドの代わりに動画が用意されていました。ちげくん凄い。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
ちげくん「ランダムできめよう～～……いらいざ」<br>いらいざ「絶対ランダムじゃないじゃん💢」 <a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a>
</p>
— ふるつき (<span class="citation">@theoldmoon0602</span>) <a href="https://twitter.com/theoldmoon0602/status/859956091223851008">2017年5月4日</a>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
「筋肉のある者から」「シード値がプロテイン」 <a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a>
</p>
— やましー@27/100 (<span class="citation">@yamasy1549</span>) <a href="https://twitter.com/yamasy1549/status/859956158538305536">2017年5月4日</a>
</blockquote>
<p>トップバッターでした。わたしは整数を構築して+1, -1, その数が0であるかどうか、の操作だけで和、積、差、羃を定義して、そのあとプログラミング言語<a href="https://github.com/eliza0x/Mikan">Mikan</a>を作った、という話をしました。さっぱり何をいってるかわからないとおもいますが許してください。LT会でもうまくつたえられなかったので残念です。人にものを説明するって言うのは難しいよなぁ…。スライドは<a href="/files/Mikan.pdf">ここ</a>に公開してあります。</p>
<p>わたしの次の発表はふるつきくんで、プログラミング言語<a href="https://github.com/theoldmoon0602/Lips">Lips</a>を作った、という発表でした。奇遇ですね。</p>
<p>この発表後も自作プログラミング言語の改良は続けていて、ふるつきくんの言語はすごいことになっています（わたしのは設計に問題があった部分を改良しているうちに連休が終わってしまった）。もう少しよくなってきたらブログにでも書きましょう。</p>
<p>Kosen14sのSlackでは、ふたりでやっぱりS式に回帰してしまうよなあ、という話をしています。</p>
<p>お昼休憩時にyudai君ときゅみな君に電子スピンの話を教えてもらいました。みんなかしこい</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
<a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a><br>留年池 <a href="https://t.co/7rTpxjcI9m">pic.twitter.com/7rTpxjcI9m</a>
</p>
— ちよみ@大魔王 (<span class="citation">@chiyomi_0121</span>) <a href="https://twitter.com/chiyomi_0121/status/859979894456934400">2017年5月4日</a>
</blockquote>
<p>奈良高専観光もやってくれました。上の写真は落ちたものが留年すると言われている留年池です。 <del>落ちるひといるのか</del> 中を覗いてみると郡山市らしく金魚がおよいでいました。具現化した単位が泳いでいるんだそうです。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
赤い <a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a>
</p>
— いらいざ (<span class="citation">@Eliza_0x</span>) <a href="https://twitter.com/Eliza_0x/status/859983529299464192">2017年5月4日</a>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
赤いぞ <a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a>
</p>
— やましー@27/100 (<span class="citation">@yamasy1549</span>) <a href="https://twitter.com/yamasy1549/status/859983616436125696">2017年5月4日</a>
</blockquote>
<p>ロシア語LTや中国語LTなんてものもありました。ふたりともその言語を交えて発表してくれて刺激的な発表でした。ドイツ語LTはアレですね、ドイツ語(を例とした自然)言語(処理)のお勉強についての発表でした。ドイツ語の発表がくるかと思ったらベクトルのはなしが始まるし滅茶苦茶だよ……, word2vecについての発表でしたが興味深かった。やましーLT上手すぎる。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
<a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a><br>西山さんうわぁああああ
</p>
— mechanic(サブ垢) (<span class="citation">@AKANE__JOJO</span>) <a href="https://twitter.com/AKANE__JOJO/status/859986576410947585">2017年5月4日</a>
</blockquote>
<p>ちげくんが人脈をいかして企業の方を呼んでいたのにはおどろきました。Mono-coto innovationのかただったんですが、わたしの生きてきた世界では想像をできないような取り組みをされていて、なんというか違う世界を覗き見することができました。</p>
<p>ちげ君の発表、動画プレゼンは衝撃的でした。わたしはうまく説明できないので彼のブログ<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>を見てください。</p>
<p>あとはアレですね、かなりめちゃくちゃなLT会でしたがなによりもめちゃくちゃだったのはしんぷっとの「メルヘン論」でしょうか。</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
<a href="https://twitter.com/hashtag/kx_lt?src=hash">#kx_lt</a><br>Q.メルヘンってな〜んだ！<br><br>A.数学です。<br>以下地獄への入り口
</p>
— きつねん(妖怪) (<span class="citation">@kituneenbi</span>) <a href="https://twitter.com/kituneenbi/status/860013584016752640">2017年5月4日</a>
</blockquote>
<p>しんぷっと「メルヘンってな〜んだ？」<br />
だれか「おとぎばなし？」<br />
しんぷっと「そうだね、数学です」<br />
しんぷっと「自分だけの最強の乱数をつくろう！」</p>
<p>でした、何言ってるか分からないと思いますがわたしもわからないので許してください。</p>
<h2 id="後日談">後日談</h2>
<blockquote>
<p>その次がいらいざ。筋肉選択。ランダムで決めてません。いらいざごめん。 Kosen14s LT ×Publicを開催した - <a href="http://chige.hatenablog.com/entry/2017/05/05/121938" class="uri">http://chige.hatenablog.com/entry/2017/05/05/121938</a></p>
</blockquote>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>http://chige.hatenablog.com/entry/2017/05/05/121938<a href="#fnref1">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Sun, 07 May 2017 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/kx_lt.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Haskellでブログを作った</title>
    <link>https://eliza.link/posts/create_blog_with_hakyll.html</link>
    <description><![CDATA[<a href="/posts/create_blog_with_hakyll.html"><h1>Haskellでブログを作った</h1>
</a>
<ul class="article_data"><li>  Posted on March 24, 2017</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/hakyll.html">hakyll</a></li>
</ul>
<section class="article_text"><p>以前ははてなブログなどで記事は書いていたんですが、どうしてもモチベーションも保てず、なんだか嫌になってブログを削除してしまいました。 しかし、やっぱり参加したイベント等の記事は書きたい。それでせっかくブログを作るならもっと自由にカスタマイズできる環境であればより楽しく続けられると思ったので、HakyllとShakespeare、そしてClayを使い、私の好きなHaskellでブログを作りました。</p>
<p>記事をかいた当時のこのページのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。 また、最新版は<a href="https://github.com/eliza0x/eliza0x.github.io">ここ</a>に公開しています。</p>
<!--more-->
<h2 id="hakyllでウェブサイトの生成">Hakyllでウェブサイトの生成</h2>
<p>HTMLやCSS, JavaScriptなど、手元で完結するようなウェブサイトの事を静的サイトと言うようです(間違っていたらごめんなさい)、そんな静的なサイトをうまいこと生成してくれるプログラムがそれはそれは沢山ある <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> のですが、その中から私はHaskellでブログを作りたかったのでHakyllを選択しました。</p>
<p><a href="https://jaspervdj.be/hakyll/">Hakyllの公式サイト</a></p>
<p>公式ページによると小〜中規模のサイト向けだそうです、使ってみてブログ以外でも割と使えるんじゃないかと思いました。</p>
<h2 id="とりあえず記事は楽して書きたい">とりあえず記事は楽して書きたい</h2>
<p><a href="http://pandoc.org/">Pandoc</a>を知っていますか？MarkdownやreStructuredText(reSTの呼称のほうが一般的？)などで書かれたドキュメントをHTMLやTeX, 果てはWord docs形式に変換してくれる便利なソフトウェアです。</p>
<p>HakyllはPandocを容易に利用することが出来るよう設計されているので、記事をMarkdownやreSTで書く事が出来ます。便利ですね。</p>
<p>また、Pandocの機能で数式や脚注を埋め込めます。</p>
<p><span class="math display">\[\ln x = \int_{-\infty}^x \frac 1 y \, dy .\]</span></p>
<p>具体的に何が出来るかや、どんなフォーマットに対応しているかは、有志によるPandocのユーザーズガイドを参照すれば良いと思います。</p>
<p><a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド(和訳版)</a></p>
<p>私の手元のPandoc(version 1.19.2.1)は以下のフォーマットに対応していました。</p>
<pre><code>Input formats:

commonmark, docbook, docx, epub, haddock, html, json, latex, markdown, markdown_github, markdown_mmd, markdown_phpextra, markdown_strict, mediawiki, native, odt, opml, org, rst, t2t, textile, twiki

Output formats:

asciidoc, beamer, commonmark, context, docbook, docbook5, docx, dokuwiki, dzslides, epub, epub3, fb2, haddock, html, html5, icml, json, latex, man, markdown, markdown_github, markdown_mmd, markdown_phpextra, markdown_strict, mediawiki, native, odt, opendocument, opml, org, plain, revealjs, rst, rtf, s5, slideous, slidy, tei, texinfo, textile, zimwiki</code></pre>
<p>ちなみにCSSさえ準備してしまえば、version1.17.1の場合以下の言語のシンタックスハイライトにも対応しています。この話は後でもうすこし書きます。</p>
<pre><code>Syntax highlighting is supported for the following languages:

abc, asn1, asp, ats, awk, actionscript, ada, agda, alertindent, apache, bash, bibtex, boo, c, cs, cpp, cmake, css, changelog, clojure, coffee, coldfusion, commonlisp, curry, d, dtd, diff, djangotemplate, dockerfile, doxygen, doxygenlua, eiffel, elixir, email, erlang, fsharp, fortran, gcc, glsl, gnuassembler, m4, go, html, hamlet, haskell, haxe, ini, isocpp, idris, fasm, nasm, json, jsp, java, javascript, javadoc, julia, kotlin, llvm, latex, lex, lilypond, literatecurry, literatehaskell, lua, mips, makefile, markdown, mathematica, matlab, maxima, mediawiki, metafont, modelines, modula2, modula3, monobasic, ocaml, objectivec, objectivecpp, octave, opencl, php, pascal, perl, pike, postscript, prolog, pure, purebasic, python, r, relaxng, relaxngcompact, roff, ruby, rhtml, rust, sgml, sql, sqlmysql, sqlpostgresql, scala, scheme, tcl, tcsh, texinfo, mandoc, vhdl, verilog, xml, xul, yaml, yacc, zsh, dot, noweb, rest, sci, sed, xorg, xslt</code></pre>
<p>聞いた事の無いようなものまで混じってしますね。</p>
<p>HakyllではこんなコードでPandocを呼び出し、ページを生成できます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compile <span class="fu">$</span> pandocCompiler 
  <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/template.hamlet&quot;</span> postCtx
  <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div>
<h2 id="shakespearean-templates">Shakespearean Templates</h2>
<p>いくら記事のHTMLを自動生成してくれるからといって、デザインは自分で行わないといけません。しかし、HTMLやCSSを生で書きたくない。始めはSass(CSSを楽して書くためのもの)とJade(Htmlを楽して書くためのもの)をつかおうと思っていたのですが、折角ならPure Haskellでブログを作ってみようと思い、Yesod Frameworkで使用されているShakespeareを使ってみました。</p>
<p>Shakespearean Templatesはテンプレート言語です、数あるテンプレート言語の中でこの言語が優れている点はHaskellとの連携が容易な点です。シームレスにHaskellの関数が呼び出すことが出来ます。</p>
<blockquote>
<p>Shakespearean Templatesとは、Webコンテンツを構成するテキストをHaskell/Yesodで生成する、下記のテンプレート言語群のことです。</p>
<ul>
<li>Hamlet(HTML)</li>
<li>Julius(JavaScript)</li>
<li>Cassius(CSS)</li>
<li>Lucius(CSS)</li>
</ul>
<p><a href="https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates" class="uri">https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates</a></p>
</blockquote>
<p>詳しく知りたければ<a href="http://www.yesodweb.com/book/shakespearean-templates">このチュートリアル</a>でも読めば良いんじゃないでしょうか。</p>
<p>HakyllとHamletの連携が面倒だったので、薄いラッパーを書きました、よければ使ってください。<br />
<a href="https://github.com/eliza0x/hakyll-shakespeare" class="uri">https://github.com/eliza0x/hakyll-shakespeare</a></p>
<p>こんなふうに使えます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;templates/*.hamlet&quot;</span> <span class="fu">$</span> compile hamlTemplateCompiler</code></pre></div>
<h2 id="clay射撃">Clay射撃</h2>
<p><del>CSSはCassiusを利用して<a href="http://getskeleton.com/">Skeleton</a>や<a href="https://milligram.github.io/">Milligram</a>を参考にしつつもがんばって一から書きました。</del></p>
<p>ClayというモナドベースのCSSプリプロセッサーがHakyll公式で推されていたので使ってみると予想以上に面白かったので、一度Cassiusで書いたCSSをClayで書き換えました。良いですよ、Clay。</p>
<p>HTMLもこういったライブラリで生成したいのは山々なんですが、Hakyllの柵 <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> で面倒くさそうです。</p>
<p><del>出来るだけシンプルにしようと心掛けて作ったのですが、<a href="yamasy.info">やましー</a>の言葉を借りるとお葬式みたいな配色になってしまいました。まあまあ気にいっていますが。</del></p>
<p>追記: 2017/3/24</p>
<p>無駄な線一本入れないでやろうと、もういちどデザインをしなおしてみました。いいものになったと思いますが、やっぱりデザインは難しいですね。</p>
<p>こんなコードでCSSを生成しています。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> putCss css

<span class="ot">fontColor ::</span> <span class="dt">Color</span>
fontColor <span class="fu">=</span> <span class="st">&quot;#303030&quot;</span>

<span class="ot">css ::</span> <span class="dt">Css</span>
css <span class="fu">=</span> <span class="kw">do</span>
  html <span class="fu">?</span> fontSize (pct <span class="fl">62.5</span>)
  p <span class="fu">?</span> <span class="kw">do</span>
    marginTop nil
    marginBottom (rem <span class="fl">3.0</span>)
  a <span class="fu">?</span> <span class="kw">do</span>
    textDecoration none
  a <span class="fu">#</span> hover <span class="fu">?</span> color secondColor</code></pre></div>
<p>公式サイトです、チュートリアルやサンプルコードもここにあります。</p>
<p><a href="http://fvisser.nl/clay/" class="uri">http://fvisser.nl/clay/</a></p>
<h2 id="コーディング">コーディング</h2>
<p>私は<a href="https://github.com/jaspervdj/jaspervdj">作者の公開されているソースコード</a>や、<a href="http://tanakh.jp/posts/2011-11-05-haskell-infra.html">tanakhさんのブログ</a>,それと<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part1.html">Imokuri氏のブログ</a>を参考にさせていただきました。もちろん<a href="https://hackage.haskell.org/package/hakyll-4.8.3.2">HakyllのHackage</a>もです、ありがとうございます。</p>
<p>とりあえずImokuri氏のブログを読んでなんとなく摑んでから、作者のプログラムでも読めばいいんじゃないかと思います。</p>
<p>またブログを始める際、Markdownは知ってるよ、という人でも<a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド</a>は読んでおいたほうが良いと思います。Pandocならではの拡張が非常に便利なので、これを使わない手は無いです。</p>
<h2 id="シンタックスハイライト">シンタックスハイライト</h2>
<p>ブログのソースコードにもシンタックスハイライトが必要です。以前nanoでプログラムのデバッグをしたとき大変でした。</p>
<p>始めはhighlight.jsでも使おうかなあなんて思っていたんですが、Pandocはシンタックスハイライトをしてくれるそうなので、染色の為に専用のCSSを準備しましょう。<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part4.html">Imokuriさんのこのページ</a>に詳しく載っています。もしくは<a href="https://github.com/eliza0x/eliza0x.github.io">私の書いたソースコード</a>でも読むと良いでしょう。</p>
<p>こんなコードです、動くかは知りません。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span>
  create [<span class="st">&quot;css/highlight.css&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
    route   idRoute
    compile <span class="fu">$</span> makeItem (compressCss <span class="fu">$</span> styleToCss tango)</code></pre></div>
<p>追記: 2017/3/24</p>
<p>現在は上記のプログラムで生成したものではなく、自分で好きなカラースキームをベースにしたものをPandoc用に移植して使用しています。</p>
<p><a href="https://github.com/morhetz/gruvbox">morhetz/grubvox - https://github.com/morhetz/gruvbox</a></p>
<h2 id="コメントフォーム">コメントフォーム</h2>
<p>私の記事について質問があった時などに、メールを送ったりするのはハードルが高いかなと思ったので、コメンドフォームをDISQUSで設けました。はじめは自分で作る気でいたのですが、 <del>面倒だった</del> スパムコメントなどが怖かったのでアウトソーシングしました。デザインも可愛く気に入っています。</p>
<p>公式サイトの指示どおりにすると動かなかったので、<a href="tanakh.jp">tanakh氏のブログ</a>のソースコードを参考にさせて頂きました。</p>
<p><a href="https://disqus.com/">DISQUS</a></p>
<h2 id="終わりに">終わりに</h2>
<p>設定がMonoidのインスタンスになっていて <code>&lt;&gt;</code> で追加の設定を追加できるのが凄く便利でした。 Hakyll自体を実際に弄ってみて、型クラスについての知識が深まりました。</p>
<p>もうすこしCSSを書かないとまだまだ粗が目立ちますね。ブログを作るのも結構大変だ… Clayを使ってみてなかなか良いなぁと思ったので、HTMLもそういったもので書き出すかもしれないです。</p>
<p>あとClay等プリプロセッサをオンデマンドでコンパイルしてHakyllから便利に扱えるようにするラッパーを書きたいですね。hintとか使えばうまくいくのかな…？</p>
<p>最後に、このサイトはGihub Pagesにて公開してあります。Github PagesはGitの使い方を知らないと利用するのは難しいかもしれないですが非常に便利です、いかがですか?</p>
<p>このブログのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。</p>
<p>追記: 2017/3/24</p>
<p><a href="https://github.com/eliza0x/eliza0x.github.io/tree/7377ae11adbbaabb2dcd4713e96cfa0183663627">最新版</a>はこちらです。</p>
<h4 id="github-pagesについて">Github pagesについて</h4>
<p>Github Pagesで独自ドメインを利用するために参考にしたものです。</p>
<ul>
<li><a href="http://qiita.com/mikakane/items/87c8f676815da4e5ac04">Github Pagesの使い方</a></li>
<li><a href="http://qiita.com/tiwu_official/items/d7fb6c493ed5eb9ee4fc">GitHub Pagesで静的なサイトを公開し、独自ドメインを設定する</a></li>
<li><a href="http://qiita.com/superbrothers/items/95e5723e9bd320094537">カスタムドメインの GitHub Pages で HTTPS を使う</a></li>
</ul>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://www.staticgen.com/">StaticGen</a> というサイトにまとまっています。静的サイトジェネレータのうちで有名なものといえばPelican(Python), Jekyll(Ruby), GitBook(JavaScript), Hugo(Go)などがあるでしょうか。おもしろそうなものでは、Lispで書かれたColeslawなんてものもあるそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>テンプレートの呼び出しのあたり<a href="#fnref2">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Fri, 24 Mar 2017 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/create_blog_with_hakyll.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>音楽の文法</title>
    <link>https://eliza.link/posts/GrammarOfMusic.html</link>
    <description><![CDATA[<a href="/posts/GrammarOfMusic.html"><h1>音楽の文法</h1>
</a>
<ul class="article_data"><li>  Posted on November  7, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<section class="article_text"><p>部室に着く頃にはみんな荷物をもって待合室にむかっている頃で、誰も居なかった。</p>
<!--more-->
<p>少し家を出るのが遅かったかな、と急いで支度をしていると部長が部屋に入ってくる。気をつかってわたしが遅刻しかかっている事をとがめない。</p>
<p>私には部活動を続ける理由がわからなかった。なぜ朝早く起きて、夜遅くまで練習をするのか。後輩に聞かれでもしたらどうしようと思っていた。やる気がないわけではなかったが、全力を出しきれてい気がしてしかたがないのはきっとこのせいだった。</p>
<p>急いで準備をする。サックスのネックをケースからとりだすと、ボディとの継ぎ目にグリースを塗る。次にコルクにグリースをたっぷり塗るとマウスピースをねじ込む。そしてネックをボディーに差し込んだあとストラップを取り付け首にさげる。最後にリガチャーのネジを締め、あらかじめ差し込んでおいたリードを固定する。</p>
<p>今日は楽器が冷たい。</p>
<p>楽器を首からぶら下げ、チューナーと楽譜を持つと何か忘れものはないか部室を見渡す。そうだ、今日は鞄も控室まで持っていかなくちゃな、とユニフォームと演奏会本番用の靴を鞄にほうりこみ、肩にさげる。</p>
<p>膝から嫌な感触がする。バスケットボールの授業で足をかけられてから調子が悪い。しかたないのでもう一方の足に力をいれる。部室の鍵をしめている部長の背中を意識しながら、自然に歩けているかな、と気にかける。</p>
<p>控室に入ると部員が数人居る。</p>
<p>「おはようございます」 「おはよう」</p>
<p>ブリネル硬さ試験機の横に鞄を置くと、後輩が話しかけてくる。</p>
<p>「今日は本番っすね」</p>
<p>今日は卒業生や地域の人が集まる一大コンサートだ。きっと親や知人もくる。このコンサートに出られるのは私にとって最後の機会だ。</p>
<p>顧問の指示で椅子を会場に出す。バケツリレーらしいが明らかに人がたりない。夜露にぬれてしまわないように部屋に運び込んでいた椅子を会場に引き出していく。椅子は持ちにくいけれど重さなんて大した事はない。こういう場合疲労の蓄積はどうなるんだろう。重く感じる場合はそれ相応の力が働いているんだろうか。</p>
<p>椅子が続々と並べられていく。脳が記憶上の資料をシークする。多分椅子は18×14で並んでいるはずだ。整列した椅子がパターンをもった模様に見える。</p>
<p>顧問がそろそろウォームアップをしようかと言うので私は楽器を抱えて部室に向う。楽器に息を通す。高音がかすれる。低温が揺れる。音程も出ない。最低音を鳴らし続けるが音に響きが感じられない。調子が悪い。</p>
<p>雲行きは怪しくなるばかりだ。</p>
<p>「合奏するぞ」</p>
<p>顧問に呼びかけられて会場に向う。ジャズバンドなら本番前の合奏はゲネプロだろうか、リハーサルだろうか。</p>
<p>ヒュウ、と風が吹く。風にのった雨がいくつか楽譜に丸いシミをつくる。しかたないので合奏を中止して昼食をとるようにと指示が入る。</p>
<p>雨が吹いているのにもかかわらず、卒業生の有志によるバンドは練習をはじめる。私は座席の最後尾で先輩方の演奏を聴く。私たちよりも少人数なのに力強いのはどうしてだろう。わかりきった事を考える。きっと今回もわからない。</p>
<p>「みんな大人ですね。」</p>
<p>隣の椅子に腰掛けた後輩が話しかけてくる。去年卒業した先輩がすごく大人に見える。在学中もそうだったんだろうか、それともスーツを着ているからだろうか。『社会に出たから』なんて答えは求めていない。先輩のイヤリングが目に入る、何かに引っかかって耳が裂けたりしないんだろうか。</p>
<p>鞄から珈琲を取り出す。苦いし複雑な味のこんなものをどうして私は好き好んで飲んでいるんだろうか。人間は味蕾という器官で味を感じていて、それが感じられる味はそれぞれ5種類しか無いといわれている。珈琲も分解すれば単純な味の集まりなんだろう。私は死ぬまでそれが本当かきっと知らない。私も音楽も単純な何かで構成されているんだろう。単純だからといって簡単じゃないなぁ、と苦笑する。</p>
<p>音楽に文法はあるんだろうか。顧問がたまに口にする楽典の存在を思い出す。</p>
<p>「控室に入ってくれ」</p>
<p>顧問の奥さんが部員のために準備してくれたエナジードリンクを飲む。気持が高揚する。これはカフェインによるものだろうか。瓶の成分表示を見る。</p>
<p>「やっぱり見ますよね」</p>
<p>以前メトロノームの説明書を読んでいた時も同じ事を言われた気がする。無水カフェイン含有量は50mgだった。</p>
<p>「今回の演奏会、成功させましょう!」</p>
<p>形にならない、言葉にもならない気持ちは存在するのだろうか、それとも言葉にしたくないだけだろうか。</p>
<p>自分の座席につくと、去年と違って空席が目立つ。寒いからだろうか。だからといって私のする事は変わらない。突然、さっと日が射す。注意を払って、しかし、思い切って演奏をする。最後はリードミスが多発したが、これが私の精一杯だ。</p>
<p>「今回は中成功だな」</p>
<p>打ち上げ会は楽しい、顧問はいつも笑いながら花束よりもお菓子の差し入れの方が多いことをネタにする。今年はシュークリームの差し入れが多かった。私も大小計4つほど食べただろうか。すこし甘すぎるなぁ、と後輩と笑った。2Lペットボトルジュースの一気飲み対決が始まる。とつぜん顧問に呼ばれる。</p>
<p>「今日のソロはなかなかやったぞ、三年間のが報われたな」</p>
<p>顧問の手は大きくて、力強かった。</p></section>
]]></description>
    <pubDate>Mon, 07 Nov 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/GrammarOfMusic.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Lilypondで楽譜を書いた</title>
    <link>https://eliza.link/posts/IntroductoryLilypond.html</link>
    <description><![CDATA[<a href="/posts/IntroductoryLilypond.html"><h1>Lilypondで楽譜を書いた</h1>
</a>
<ul class="article_data"><li>  Posted on September 19, 2016</li>

<li> Tags: <a href="/tags/music.html">music</a></li>
</ul>
<section class="article_text"><p>吹奏楽部でソロをもらったのですが、本来はピアノがソロを担当する曲なのでサックスの譜面がなく、しかたなく書くことになりました。</p>
<blockquote>
<p>LilyPond は、可能な限り高品位な楽譜を生み出すことを目的とする、オープン ソースの楽譜作成プログラムです。このフリー ソフトウェアは、伝統的な彫版の楽譜の美しさをコンピュータ プリントアウトで実現します。LilyPond はフリーソフトウェアであり、GNU プロジェクト の一部です。 - <a href="http://lilypond.org/index.ja.html" class="uri">http://lilypond.org/index.ja.html</a></p>
</blockquote>
<!--more-->
<p>GNUらしく公式サイトでは自由が強調されています。GNUのサイトはデザインこそカッコイイとはいい難いものの、どれも目にやさしく見やすいので私は好きです。</p>
<p>「高品位な」と言っているだけあって、無調整でもなかなか美しい楽譜を作ることが出来ました。 LilypondはTeX同様、テキストからpdfを出力します、なのでバージョン管理もできますし、好きなエディターで編集することもできます、そしてMusiXTeXと比べ非常に簡単に扱う事ができます。</p>
<p>弱点といいますか、WYSIWYGではないので間違いを見つけたときに書き直す箇所をみつけるのが大変でした、それ以外はまったく問題ありませんでした。</p>
<h2 id="環境を整える">環境を整える</h2>
<p>わたしはVimで楽譜を書きたかったので、Vimに<a href="https://github.com/matze/vim-lilypond">matze/vim-lilypond</a>を追加しました。 PlugやNeoBundle、今ならdein等のVimのプラグインマネージャを使えば簡単に導入できるでしょう。 話はそれますが、わたしは<a href="https://github.com/itchyny/miv">miv</a>というHaskellで書かれたプラグインマネージャを使用しています。オススメです。</p>
<h2 id="楽譜を書く">楽譜を書く</h2>
<p>Lilypondは容易に使用できるにかかわらず非常に強力です、以下に<a href="http://lilypond.org/examples.ja.html" class="uri">http://lilypond.org/examples.ja.html</a>からの例を載せておきます。</p>
<div class="figure">
<img src="../images/LilypondExam2.png" />

</div>
<p><a href="http://lilypond.org/doc/v2.18/Documentation/learning/index.ja.html">公式サイトのリファレンス</a>が充実しているので、それを読めば楽譜はひととおり書けるでしょう。</p>
<p><a href="http://lilypond.org/doc/v2.18/Documentation/notation/cheat-sheet">チートシート</a>も用意されています。</p>
<p>この説明だけでは味気ないので、すこしだけサンプルコードを載せておきます。</p>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>
<span class="kw">{</span>
  c&#39; e&#39; g&#39; e&#39;
<span class="kw">}</span></code></pre></div>
<p>以上のコードで</p>
<div class="figure">
<img src="../images/LilypondExam3.png" />

</div>
<p>のような譜面ができます。ひとつずつ解説しましょう。</p>
<ul>
<li>楽譜の目には見えない部分の設定は、<code>\hoge</code>でおこないます。<code>\version</code>はLilypondのバージョンを指定しています。</li>
<li>楽譜本体は<code>{</code>と<code>}</code>で囲みます。</li>
<li>音の指定はコードで指定します。<code>a</code>から<code>g</code>までで<code>h</code>は存在しません。小文字です。</li>
<li>コードの後の<code>'</code>は1オクターブ上の音、という意味です。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;</span> <span class="kw">{</span>
  c&#39; c&#39; c&#39; c&#39; <span class="dv">|</span> c&#39; c&#39; c&#39; c&#39; <span class="dv">|</span> c, c, c, c, <span class="dv">|</span> c, c, c, c,
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam5.png" />

</div>
<ul>
<li><code>\relative</code>で相対的に記述を行うことができます。</li>
<li><code>|</code>で小節を明示的に区切ることができます。自動でも区切られますが、あえて示す事によって一小節に音が足りない場合を検知してくれるのでミスが減ります。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;</span> <span class="kw">{</span>
  <span class="fu">\key f</span> <span class="fu">\major</span>
  c&#39; r<span class="dt">2</span> d,<span class="dt">4</span> <span class="dv">|</span> r<span class="dt">4.</span> d<span class="dt">8</span> c<span class="dt">4</span> a
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam4.png" />

</div>
<ul>
<li>音の後の数字で長さを指定します。</li>
<li><code>\key</code>で調を指定しています。</li>
<li><code>r</code>で休符です。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;&#39;</span> <span class="kw">{</span>
  a b c d <span class="dv">|</span> <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt;<span class="ch">(</span> <span class="dv">|</span> <span class="dt">&lt;</span>a b c d e&gt;<span class="dt">1</span><span class="ch">)~</span> <span class="dv">|</span> <span class="dt">&lt;</span>a b c d e&gt;<span class="dt">1</span>
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam6.png" />

</div>
<ul>
<li><code>&lt;</code>と<code>&gt;</code>で囲んだ範囲が和音になります。</li>
<li><code>(</code>と<code>)</code>で囲んだ範囲がスラーになります。</li>
<li><code>~</code>を付けると後の音とのタイになります。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;&#39;</span> <span class="kw">{</span>
    c<span class="dt">4</span>-<span class="st">^\p</span> c-<span class="st">+\pp</span> c-<span class="st">-\f</span> c-!<span class="st">\ff</span> <span class="dv">|</span> c<span class="dt">4</span>-<span class="st">&gt;</span> c-<span class="st">.</span> c<span class="dt">2</span>-<span class="st">_</span>
  <span class="dv">|</span> a<span class="st">\&lt;</span> b<span class="st">\!</span> c d<span class="st">\&gt;</span> <span class="dv">|</span> e<span class="dt">1</span>
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam7.png" />

</div>
<ul>
<li>各アーテュキレーションも付ける事ができます。</li>
<li><code>\!</code>でクレセンド、デクレセンドの終端になります。</li>
</ul>
<!-- 誤りを発見
最後に、わたしの実際に書いたコードの断片を紹介します。

```lilypond
\version "2.18.2" 

\header { 
 title = \markup \center-align { "Autumn Leaves" } 
 subtitle = \markup \center-align { "Solo Score" } 
} 
\paper { 
	#( set-paper-size "a4" ) 
} 
\transpose c' bes' {
  \relative c' {
    \key f \major
    \time 4/4
      r2 d8^"Solo" c bes a( | a4.) d8 c bes a c | bes a r g r f r a( | a) bes c a( a4.) f8 
    | <f a> <f a> r4 r2 | r8 e g[ bes] d[ c bes a] | bes cis,4. r8 cis e[ d]( | d4) r d8 f a e'
  }
}
```

![](../images/LilypondExam8.png)

- `\time 4/4`で四分の四拍子であることを明示。^[この例の場合はしなくても良い]
- `-es`、`-is`でシャープ、フラット
- Cの調の楽譜をBes調の楽譜に起こしたかったので、Cそのままで一度書いたあとに、`\relative c bes`でBesに変換した。
-->
<p>以上です、簡単だったでしょう？さあ、LilyPondをインストールして音楽家になりましょう。</p></section>
]]></description>
    <pubDate>Mon, 19 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/IntroductoryLilypond.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>型システム入門(TaPL)読書メモ</title>
    <link>https://eliza.link/posts/TaPL.html</link>
    <description><![CDATA[<a href="/posts/TaPL.html"><h1>型システム入門(TaPL)読書メモ</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLでの読書メモが書いてあります随時追記していきます。 間違いを発見した場合はコメントか、me [at] eliza [dot] linkまでメールを下さると喜びます。</p>
<p><a href="http://tapl.proofcafe.org/home">日本語のサポートページ</a>が準備されています。 また、<a href="https://estore.ohmsha.co.jp/titles/978427406911P">出版元のページ</a>から第一章が無料で読めます。</p>
<p>通読したのちにまた記事を書こうと思っています。</p>
<!--more-->
<h2 id="予備知識について">予備知識について</h2>
<p><a href="/posts/PreTaPL.html">このページに書いてあります</a></p>
<h2 id="tapl">TaPL</h2>
<blockquote>
<p>型システムとは、プログラミング言語の安全性や効率を高めるうえで重要な理論・手法です。本書は、その型システムについて基礎的な話題を網羅し、実装例を交えて丁寧に解説したThe MIT Press発行の解説書“Types And Programming Languages”（TAPL）を翻訳したものです。言語設計者や学生だけでなく、静的型付言語を深く理解して活用したいプログラマーにとっても貴重な情報となっています。 <a href="http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948" class="uri">http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
サポートサイトができたらジュンク堂トークのPDFも載ると思いますが、これだけは先に：型システム入門(TAPL)はとりあえず1,3,8,5,9,11章（＆2章の必要な部分）と、あとは好きな章を読めば「読んだ」ことにしても良いと思います！（60%本気）
</p>
— Eijiro Sumii (<span class="citation">@esumii</span>) <a href="https://twitter.com/esumii/status/315135694462939137">2013年3月22日</a>
</blockquote>
<p>以降読書メモです</p>
<h4 id="第1章-はじめに">第1章 はじめに</h4>
<p>型を導入する意義や、型システムの実用例が書かれています。</p>
<h4 id="第2章-数学的準備">第2章 数学的準備</h4>
<p>_- 数学の公式や前提として必要な知識が列挙されています、ここで馴染の無い物があれば読むのを中断し、いちどその分野の知識を補うべきだとしていますが私は強行を決めました。 - 2017/05/07 勉強しました</p>
<h2 id="第1部-型無しの計算体系">第1部 型無しの計算体系</h2>
<h4 id="第3章-型無し算術式">第3章 型無し算術式</h4>
<ul>
<li>正規形
<ul>
<li>もう項が評価できない、という意味である。 <code>if t1 then t2 else t3</code> は評価できるが、 <code>true</code> はもう評価できない。</li>
<li>項が正規形であるにかかわらず値ではない場合を『行き詰まり状態』と言う。</li>
<li>すべての項に対して、ある正規形が存在する</li>
</ul></li>
<li>多ステップ評価
<ul>
<li>1ステップ評価を合成したやつだと理解しておいた。</li>
</ul></li>
</ul>
<h4 id="第4章-算術式のml実装">第4章 算術式のML実装</h4>
<ul>
<li>Arithで満たしている機能と色々が含まれている言語を作りました。</li>
<li>Mikan - <a href="https://github.com/eliza0x/Mikan/tree/e62f16b277af3118dacdd8c7c3ea0655c2766713" class="uri">https://github.com/eliza0x/Mikan/tree/e62f16b277af3118dacdd8c7c3ea0655c2766713</a></li>
</ul>
<h4 id="第5章-型無しラムダ計算">第5章 型無しラムダ計算</h4>
<ul>
<li>なんとなく分かったら、<a href="http://tarao.hatenablog.com/entry/20100208/1265605429">ラムダ計算基礎文法最速マスター</a>にあっさりと書かれているので読むといいかも。</li>
<li><span class="math inline">\(\lambda\)</span>(Lambda)計算
<ul>
<li>全ての計算が関数定義と関数適用で表される(trueやfalse、数も関数!)</li>
<li>複雑なプログラミング言語のエッセンスは小さな核となる計算の集まりとして定式化できる、という事で生まれた。</li>
</ul></li>
<li>Lambda計算はプログラミング言語であると共に証明可能な数学的対象。</li>
<li>Lambda計算に似たようなものに<span class="math inline">\(\pi\)</span>計算やオブジェクト計算がある(本書では扱わないらしいが)
<ul>
<li><a href="http://web.yl.is.s.u-tokyo.ac.jp/kobalab/kadai99/picalc.html">π-calculus 超入門</a></li>
<li>もしかしてアクターモデルの原点？</li>
</ul></li>
<li>自由変数の無い項を「閉じている」もしくは「コンビネータ」という。
<ul>
<li><span class="math inline">\(\lambda x.\; x\)</span> 例えばこの恒等関数はコンビネータである。</li>
<li><span class="math inline">\(\lambda x.\; y\)</span> この項はコンビネータではない。</li>
</ul></li>
<li><span class="math inline">\((\lambda x.\; x) y\)</span> は <span class="math inline">\(y\)</span> と評価される。</li>
<li>ラムダ計算の評価戦略は数種類あり、プログラミング言語によっても違う。
<ul>
<li>Haskellは名前呼び戦略の変種である必要呼び戦略</li>
<li>大多数の言語では値呼び戦略</li>
</ul></li>
<li>値呼び評価は「正格」名前呼び戦略は「非正格」もしくは「遅延評価」と呼ばれる。</li>
<li>純粋なラムダ計算でもブール値や数の表現と評価は出来る
<ul>
<li>純粋なラムダ計算ではTrueとFalseを以下のように表現する。</li>
<li><span class="math inline">\(true\; =\; \lambda t.\; \lambda f.\; t;\\false\; =\; \lambda t.\; \lambda f.\; f;\)</span></li>
<li>面倒、なので必要に応じて拡張して使ったりする。</li>
</ul></li>
<li>正規形に評価できない項が存在する。
<ul>
<li><span class="math inline">\(omega\; =\; (\lambda x. x\; x)\; (\lambda x. x\; x);\)</span></li>
<li>簡約基を一つだけ持っているが、簡約すると<span class="math inline">\(omega\)</span>そのものになるためである。</li>
<li>これを発散という。</li>
</ul></li>
<li><span class="math inline">\(omega\)</span>コンビネータには不動点コンビネータと呼ばれる一般化がある。
<ul>
<li>Haskellが分かるならtanakh氏の<a href="http://d.hatena.ne.jp/tanakh/20040813">不動点演算子</a>の記事が面白いかも。</li>
</ul></li>
</ul>
<h4 id="第6章-項の名無し表現">第6章 項の名無し表現</h4>
<ul>
<li><a href="http://ryna4c2e.hatenablog.com/entry/20141023/1414077068">de Bruijn indexについての備忘録</a>が参考になると思います。</li>
<li>代入等を可能にするため、変数に適宜新しい名前を与えたい。</li>
<li>そのためには様々な方法があります。
<ul>
<li>本著では「de Bruijinインデックス」<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>を使用しています。</li>
</ul></li>
<li>de Bruijinインデックス
<ul>
<li>変数を名前から解放したい。</li>
<li>束縛しているLambdaからどれだけ遠い(深い)かを自然数で表します。</li>
<li>例
<ul>
<li><span class="math inline">\(\lambda x.\; x \Rightarrow \lambda .\; 0\)</span></li>
<li><span class="math inline">\(\lambda x.\lambda y.\; y\; x \Rightarrow \lambda.\lambda. \; 0\; 1\)</span></li>
<li><span class="math inline">\(foo = (\lambda x. (\lambda x. x)) (\lambda x. x); \Rightarrow foo = (\lambda .\lambda . 0) (\lambda . 0);\)</span></li>
<li><span class="math inline">\(\lambda\)</span> の数より多い数値の場合、自由変数を指す。例えば <span class="math inline">\(\lambda .1\; 0\)</span> の <span class="math inline">\(1\)</span> は自由変数</li>
</ul></li>
<li>名無し項より自由変数を含むかどうか判別が簡単。</li>
</ul></li>
<li>シフト
<ul>
<li>de Bruijinインデックスを導入すると、代入の際自由変数のみインデックスを変更する必要が出てくる。</li>
</ul></li>
</ul>
<p>自由変数にインデックスを割り当てます。 <span class="math display">\[
\gamma =    foo \mapsto 2 \\
\qquad      bar \mapsto 1 \\
\qquad\quad z   \mapsto 0
\]</span></p>
<p>Lambda式です。 <span class="math display">\[
foo = \lambda x. \lambda y. z \\
bar = \lambda x. foo\; x
\]</span></p>
<p>変数をde Bruijinインデックスで表現します。 <span class="math display">\[
foo = \lambda . \lambda . 2 \\
bar = \lambda . 3\; 0
\]</span></p>
<p><code>foo</code>をインライン化します。 <code>bar</code>のLambdaの一つ内側に入る訳ですから、1個シフトする必要があります。<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<p><span class="math display">\[
bar = \lambda . (\lambda . \lambda . 3)\; 0
\]</span></p>
<p><span class="math inline">\(\beta\)</span>簡約をしましょう。Lambdaが一つ減るたびに、インデックスを一小さくする必要があります。</p>
<p><span class="math display">\[
bar = \lambda . \lambda . 2
\]</span></p>
<!-- #### 第7章	ラムダ計算のML実装 -->
<h2 id="第2部-単純型">第2部 単純型</h2>
<h4 id="第8章-型付き算術式">第8章 型付き算術式</h4>
<ul>
<li>進行定理
<ul>
<li>正しく型付けされた項は行き詰まり状態に陥らない。</li>
</ul></li>
<li>保存定理
<ul>
<li>正しく型付けされた項が評価できるならば、評価後の項も正しく型付けされている。</li>
</ul></li>
<li>以上二つの定理を満たしたものを型安全<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>である、と言われる。</li>
</ul>
<!--
  #### 第9章	単純型付きラムダ計算
  
  - Lambda抽象を型として扱う$\rightarrow$型
  	+ これだと$(\lambda x. 0) true$のような時に型がつけられない
  	+ これでは書きたいプログラムに型が割り当てられないことが多々ある
  
  ```haskell
  foo = if <長く複雑な式>
  	then true
  	else print "ERROR"
  ```
  
  このHaskellのプログラムでは型エラーでコンパイルが通らない。
  
  > ラムダ計算はチューリング完全なので正格な型解析は不可能である
  > -- P. 75 9.1章
  
  - ちょっとよく分からない
    ~ $omega$等発散してしまう場合に無限を扱えないため？
  
  - 型付きラムダ計算は$\lambda _\rightarrow$と表記される_
  - 導入規則: その型の要素がどのように作られるか
  - 除去規則: その型の要素がどのように使われるか
  - 論理学と型理論のふしぎな関連はCurry-Howard対応^[Curry-Howard同型ともよばれる]として知られている
  	+ [Haskell/カリー=ハワード同型](https://ja.wikibooks.org/wiki/Haskell/%E3%82%AB%E3%83%AA%E3%83%BC%3D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B)が面白い
  - 型注釈は評価においてはなんの役割も果たさない
  - たいていのプログラムは実行時に型無しの項にもどされる
    + [型安全なリストを作るのです(｀・ω・´) ～ その1、Phantom Type（幽霊型）入門ですー＞ω＜](https://kagamilove0707.github.io/programming/2014/02/20/about-phantom-type/)が面白い
-->
<!--
  #### 第10章	単純型のML実装
  #### 第11章	単純な拡張
  #### 第12章	正規化
  #### 第13章	参照
  #### 第14章	例外
  
  ## 第3部	部分型付け
  #### 第15章	部分型付け
  #### 第16章	部分型付けのメタ理論
  #### 第17章	部分型付けのML実装
  #### 第18章	事例：命令的オブジェクト
  #### 第19章	事例：Featherweight Java
  
  ## 第4部	再帰型
  #### 第20章	再帰型
  #### 第21章	再帰型のメタ理論
  
  ## 第5部	多相性
  #### 第22章	型再構築
  #### 第23章	全称型
  #### 第24章	存在型
  #### 第25章	System F のML実装
  #### 第26章	有界量化
  #### 第27章	事例：命令的オブジェクト再考
  #### 第28章	有界量化のメタ理論
  
  ## 第6部	高階の型システム
  #### 第29章	型演算子とカインド
  #### 第30章	高階多相
  #### 第31章	高階部分型付け
  #### 第32章	事例：純粋関数的オブジェクト
  
  ## 付録A	演習の解答
  ## 付録B	記法
-->
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>「de Brujin項」とも呼ばれるそうです。日本語ではド ブラウンと読むのが一番近いそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>数式に起こすと <span class="math inline">\(\uparrow ^2 (\lambda . \lambda . 2)\)</span><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>健全性とも言われる<a href="#fnref3">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/TaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>TaPLに必要な知識の学習記録</title>
    <link>https://eliza.link/posts/PreTaPL.html</link>
    <description><![CDATA[<a href="/posts/PreTaPL.html"><h1>TaPLに必要な知識の学習記録</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLを読むのために少し勉強したのでメモを残しておきます。 必要に応じて追記していきます。</p>
<p><a href="http://zoetrope.hatenablog.jp/entry/2013/07/24/204613">数学初心者のための「型システム入門」入門</a>によると前提として以下の知識が必要になるようです。</p>
<blockquote>
<ul>
<li>数学(離散数学、アルゴリズム、論理学)</li>
<li>高階関数型プログラミング言語(Scheme、ML、Haskellなど)</li>
<li>コンパイラの基礎的な概念(抽象構文、BNF文法、評価、抽象機械など)</li>
</ul>
</blockquote>
<p>TaPLの読書記録は<a href="/posts/TaPL.html">このページ</a>に載っています。</p>
<p>2017/05/07 数学をきちんとやって行くことを決めて半年以上立ちます。</p>
<!--more-->
<h2 id="論理学">論理学</h2>
<ul>
<li><a href="http://abelard.flet.keio.ac.jp/person/mitsu/pdf/nyumon_logic.pdf">「論理学入門」講義ノート</a>が論理学で検索してヒットしたものの中で一番容易に読み進めることができそうだったので読み流した(証明は追いかけるの面倒だったので飛ばした)。</li>
<li>記号がダメな人はアレルギーをおこしそうな分野でした、印刷したテキストをうっかり直視した友人は帰らぬ人となりました。(まあプログラマは大丈夫だと思う)</li>
<li>後日みつけた資料ですが、こちらのほうが易しく書かれています。 <a href="http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf" class="uri">http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf</a></li>
<li>2017/05/07 数学に興味をもったため、野矢茂樹氏の書いた<a href="http://www.utp.or.jp/bd/978-4-13-012053-1.html">論理学</a>を読みました。</li>
</ul>
<h2 id="集合論">集合論</h2>
<ul>
<li>TaPLの冒頭に集合がなんだかんだと書かれていたので勉強が必要だと思い、<a href="http://www.math.twcu.ac.jp/~yamauchi/text/2012/alg2012/set_logic.pdf">東京女子大学の代数学IA(集合と論理)のテキスト</a>を読んでみました。
<ul>
<li>私の環境では途中で組版がすこし崩れています。
<ul>
<li>ChromenのPDFビューアのせいだったようです。</li>
</ul></li>
</ul></li>
<li>2017/05/07「集合・位相入門」の集合の項だけ読みました。 <a href="https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html" class="uri">https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html</a></li>
<li>2017/05/07 <a href="http://www.asakura.co.jp/books/isbn/978-4-254-11478-2/">集合への30講</a>を読みました。</li>
</ul>
<h2 id="離散数学">離散数学</h2>
<ul>
<li>これもきちんとやります。</li>
</ul>
<h2 id="ラムダ計算">ラムダ計算</h2>
<ul>
<li><a href="http://language-and-engineering.hatenablog.jp/entry/20130313/LambdaCalculusBasicNoteLinks">「ラムダ計算」を独学で学習するための，講義ノートやPDFのリンク集 （復習用の問題付き）</a>に詳しくまとまっています。</li>
<li>これもきちんとやります。</li>
</ul>
<h2 id="アルゴリズム">アルゴリズム</h2>
<ul>
<li>ダメです。</li>
</ul></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/PreTaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>劣等感を感じる自分について</title>
    <link>https://eliza.link/posts/ZenMind.html</link>
    <description><![CDATA[<a href="/posts/ZenMind.html"><h1>劣等感を感じる自分について</h1>
</a>
<ul class="article_data"><li>  Posted on August 17, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<section class="article_text"><p><a href="http://kosen14s.github.io/">Kosen14s</a>の人達は知っていると思うけれど、私は驚くほど英語が出来ない。中学時代にまったく勉強をしなかったので、それ以前から学んでいた数学や国語はまあまあ出来るけど、中学から習い始めた英語は壊滅的だ。</p>
<!--more-->
<p>そのおかげで、こう言っては同学の人達に失礼だけれど賢くない高校に入学せざるをえなかった。しかも工業高校だ。 おかげで私の脳味噌はすっからかんだ。授業の半分が先生の中身の無い雑談でなくなるような授業を三年うけていたからね。</p>
<p>白状しよう、私は勉強ができない事に非常に劣等感をもっている。</p>
<p>私はプログラミングが好きだ。楽しいから？怪しい。</p>
<p>プログラミングを始めた原因はなんとなくカッコよかったからだ。プログラミングをはじめた頃は作業の大半の時間をWikipediaで潰していた気がする、ようするに好きじゃなかったんだ。 プログラミングを始めた理由なんて今となっては分からないけれど、カッコよくみえたのは、頭がよさそうにだったからかも知れない。天才ハッカーってね。</p>
<p>それでもダラダラとプログラミングは続けた。ただただ「同級生は出来ないけれど私にはプログラミングが出来る」という根拠の無い自信で劣等感におしつぶされそうな自分の心の平衡を保っていた。</p>
<p>今でこそ楽しんでプログラミングをしているけど、純粋に楽しんでいるかは分からない。 楽しいかどうかなんて心の問題だと思うので大した問題じゃないだろう、とも思う。</p>
<p>結局他人と比べるから劣等感を持ったり悩んだりするんだ。</p>
<p>そして劣等感に悩む自分が出した解決策が“Zen”だ。 たいしてネーミングに意味は無い、なんとなく禅っぽいものだからZenだ。<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>「謙虚になれ」「こんな下らないことに心を動かされるとは情けない」「何かに依存するな」</p>
<p>何でも自分と比較して物事を見るのを辞めた。素直になった。 ごめん、嘘言った。素直になろうと思う。</p>
<p>しまりの無い記事になってしまった。</p>
<p>さあ、Zen Mindを手に入れた次は努力して勉強だ。根本から悩む原因を解決するのだ。</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>そもそも禅とは何かを良くしらない<a href="#fnref1">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Wed, 17 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/ZenMind.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Blink on AtTiny85</title>
    <link>https://eliza.link/posts/AtTiny85a.html</link>
    <description><![CDATA[<a href="/posts/AtTiny85a.html"><h1>Blink on AtTiny85</h1>
</a>
<ul class="article_data"><li>  Posted on August  8, 2016</li>

<li> Tags: <a href="/tags/programming.html">programming</a>, <a href="/tags/microprocessor.html">microprocessor</a>, <a href="/tags/arduino.html">arduino</a></li>
</ul>
<section class="article_text"><p><a href="https://twitter.com/mc475_46">もは氏/mc475_46</a>の勧めもあってついにAVRマイコンに手を出してみました。後悔するのは後になってからでも構わないでしょう。 自分の書いたプログラムがPCの外で動いているというのは新鮮ですし、マイコンはプログラミングと日常をつないでくれるような気がしてなんだかとても楽しいです。</p>
<p>PlatformIOでFT232RLを使ってAtTiny85(AVR)に書き込んでいる記事なネットでみつけられなくて苦労したのでこの記事を書きました。</p>
<!--more-->
<h2 id="tldr">TL;DR</h2>
<p><a href="#プログラムを書き込む">ここ</a>のプログラムを参照して</p>
<p>結線後に<code>./src/main.ino</code>と<code>./platformio.ini</code>にファイルを配置して<code>platformio run -t upload</code>すればOK。</p>
<h2 id="長い文章を読める人類向け">長い文章を読める人類向け</h2>
<p>回路図も作ってがんばって記事を書くつもりでしたが、Fritzing(可愛い回路図をつくれるソフト)のビルドが目の前でSegmentation faultを投げてから心が終わってしまったのでそれほど長い記事にはならない筈です。</p>
<p>さて、今回目指すのはAVR ーわたしが取り組んだのはAtTiny85ですが、おおよそ同じ手順でAVRのマイコン全般は動作する事でしょうー でBlink(Lチカ)をすることです。</p>
<p>ArduinoIDEなどGUIからでも出来るようですが、IDEはVimが使えないので面倒です。なので今回はPlatformIOというソフトウェアでコンパイルから書き込みまで行おうと思います。</p>
<h2 id="attiny85">AtTiny85?</h2>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">データシート</a></p>
<p>AVRはAtmel社が作っているRISCのマイコンです。AtTiny85はそのAVRのうちのTinyシリーズに属するもので、Tiny(ちっぽけ)の名にふさわしくピンは8本しかありません、さらにそのうちの2PINは電源に使用するので我々は6PINしか使う事が出来ません。しかしDIP版でもわずか1cm * 1cmのマイコンにはROMが8Kbyte,RAMが512Byteも搭載されています、必要十分ではないでしょうか。</p>
<div class="figure">
<img src="/images/AtTiny85.jpg" alt="画像は秋月電子様より" />
<p class="caption">画像は秋月電子様より</p>
</div>
<h2 id="platformio">PlatformIO？</h2>
<blockquote>
platformioがすごいのは、IDEが必要ないということだ。inoは別途IDEが必要だったがplatformioは必要ない。パッケージとして自動でダウンロードしてくれるのだ。さらにすごいのは様々な組み込みボードをサポートしている。 有名どころはばっちり抑えているようで、STM32 Nucleoなど最近のボードもサポートされている。<br />
<a href="http://qiita.com/caad1229/items/7b5fb47f034ae6e0baf2">Qiita - コマンドラインでArduino開発 : vim + platformio</a>
</blockquote>
<p>コマンド一つでそのマイコンに必要なソフトウェアをインストールしてくれたり、ライブラリのインストーラになったりする凄いソフトウェアです、上記のリンクの記事を読めばだいたいの使い方は分かると思います。</p>
<h2 id="ft232rl">FT232RL</h2>
<p>秋月電子さんが出しているUSB - Serial変換基盤です、FTDI社のFT232Rというチップを利用しているようです。特殊なモードでマイコンにプログラムを書き込みます。 専用の書き込み機を買うと結構値が張るのでありがたいですね。</p>
<h2 id="avrdude">Avrdude</h2>
<p><a href="http://www.nongnu.org/avrdude/">AVRDUDE is a utility to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in-system programming technique (ISP).</a></p>
<p>AVRマイコンにプログラムを書き込むのに、PlatformIOはバックエンドでこれを使用しているみたいです。</p>
<p>しかしAvrdudeもPlatformIOもインターネットに記事が少ない…苦労しました。</p>
<h2 id="プログラムを書き込む">プログラムを書き込む</h2>
<p>はじめにFT232Rのドライバをインストールしましょう、お好みのパッケージマネージャや<a href="http://www.ftdichip.com/Drivers/VCP.htm">FTDIのWebサイト</a>からダウンロードしてください。 普通にFT232Rを使用するだけならドライバは必要無いようなのですが、BitBangモードでFT232Rを使用するには専用のドライバが必要になるそうです。</p>
<p>BitBangモードについては、<a href="http://ore-kb.net/hard/BitBang/">この記事</a>にくわしく書かれていました。</p>
<p>つぎにPlatformIOをインストールしてください、これもパッケージマネージャや<a href="http://platformio.org/">公式サイト</a>からインストールできます。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> AtTiny85  
$ <span class="bu">cd</span> AtTiny85/  
$ <span class="ex">platformio</span> init -b attiny85  </code></pre></div>
<p>さあ、AtTiny85に書き込む準備は整いました</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">void</span> setup(){
  pinMode(<span class="dv">1</span>, OUTPUT);
}

<span class="dt">void</span> loop(){
  digitalWrite(<span class="dv">1</span> , HIGH);
  delay(<span class="dv">1000</span>);
  digitalWrite(<span class="dv">1</span> , LOW); 
  delay(<span class="dv">1000</span>);
}</code></pre></div>
<p><code>main.ino</code></p>
<div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[env:attiny85]</span>
<span class="dt">platform </span><span class="ot">=</span><span class="st"> atmelavr</span>
<span class="dt">framework </span><span class="ot">=</span><span class="st"> arduino</span>
<span class="dt">board </span><span class="ot">=</span><span class="st"> attiny85</span>
<span class="dt">upload_protocol </span><span class="ot">=</span><span class="st"> diecimila</span>
<span class="dt">upload_flags </span><span class="ot">=</span><span class="st"> -v -F -e -p t85 -B9600</span>
<span class="dt">board_f_cpu </span><span class="ot">=</span><span class="st"> 1000000L</span>
<span class="co"># upload_port = /dev/ttyUSB0</span></code></pre></div>
<p><code>platformio.ini</code></p>
<p>あとは<code>main.ino</code>を自動生成されたsrcディレクトリ下、<code>platformio.ini</code>を置き換えて下さい。</p>
<p>工夫しているのはPlatformIOの<code>upload_protocol</code>と<code>upload_flags</code>ぐらいで、Avrdude用にすこしオプションを書いてあるだけです。 マイコンをAtTiny85以外を使いたいなら、<code>board</code>の中身を変更してください。</p>
<p>具体的にどう変更すれば良いかわからなければ、<code>platformio boards</code> で一覧が表示されます。</p>
<p>さあ、あとは結線をするだけです。</p>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">Atmelのデータシート</a></p>
<p><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a#%E5%9B%9E%E8%B7%AF">結線はこのリンクを参考にしてください</a></p>
<p>さあ、出来ましたか？</p>
<div class="figure">
<img src="/images/Ft232rlToAttiny85.jpg" />

</div>
<p>それでは <code>$ platformio run -t upload</code> して下さい。</p>
<p>書き込めましたか？それではAtTiny85を差し替えてBlinkしてみましょう、AtTiny85のIOはこの通りになっています。</p>
<div class="figure">
<img src="/images/AttinyBlink.png" alt="画像はSparkFun様より" />
<p class="caption">画像はSparkFun様より</p>
</div>
<p>ArduinoでLEDを光らせていた時の1/10程度の大きさで同じことが実現できてしまいましたね、最高です。</p>
<div class="figure">
<img src="/images/Blink.jpg" alt="Blink" />
<p class="caption">Blink</p>
</div>
<p>なお、うまくいかない人はTwitterの@Eliza_0xか、me [at] eliza [dot] linkまでメールをくだされば、出来る限り手伝います。</p>
<h2 id="thanks">Thanks</h2>
<p>紹介できなかった私が参考にしたリンク達</p>
<ul>
<li><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a">FT232RLでAVRライターを自作してATtiny85をDigispark互換にするまで</a></li>
<li><a href="http://make.kosakalab.com/make/electronic-work/arduino-ide-arduinoisp/">Arduino IDEでATtiny他の開発（Arduino-ISP編）</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/tiny-avr-programmer-hookup-guide/attiny85-use-hints">Tiny AVR Programmer Hookup Guide</a></li>
<li><a href="http://techlife.cookpad.com/entry/2015/10/28/080000">電子工作に必要な道具達</a></li>
<li><a href="http://qiita.com/erukiti/items/1a517c3e424835ca14f1">ステップアップ電子工作/レベル1前編 ブレッドボードで電子工作を始めよう (まずは準備編)</a></li>
<li><a href="http://startelc.com/AVR/Avr_100timrMemo.html">AVRのタイマー</a></li>
<li><a href="http://qiita.com/tadfmac/items/3a42a641531f2c3679a1">ArduinoユーザーのためのATTiny入門</a></li>
<li><a href="http://www.ernstc.dk/arduino/38khz_timer.htm">Using timers to generate 38KHZ - for IR</a></li>
<li><a href="https://www40.atwiki.jp/system-ed/pages/16.html">C言語　演算子</a></li>
<li><a href="http://tyk-systems.com/ATmega328/ATmega328.html">Arduinoから取り外したATmega328を外付け水晶振動子(発振子)で動作させる。</a></li>
<li><a href="http://www.wsnak.com/wsnakblog/?p=4110">arduino(AVR)でキャリア波38KHzを発生させる</a></li>
</ul>
<p>他多数、関係企業とプログラマ達に感謝</p></section>
]]></description>
    <pubDate>Mon, 08 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/AtTiny85a.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>

    </channel>
</rss>
