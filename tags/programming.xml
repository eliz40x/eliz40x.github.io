<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Posts tagged programming -  | ELIZA.link</title>
        <link>https://eliza.link</link>
        <description><![CDATA[技術録や日記を残します]]></description>
        <atom:link href="https://eliza.link/tags/programming.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 15 Sep 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>型システム入門(TaPL)読書メモ</title>
    <link>https://eliza.link/posts/TaPL.html</link>
    <description><![CDATA[<a href="/posts/TaPL.html"><h1>型システム入門(TaPL)読書メモ</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLでの読書メモが書いてあります随時追記していきます。 間違いを発見した場合はコメントか、me [at] eliza [dot] linkまでメールを下さると喜びます。</p>
<ol start="17" style="list-style-type: upper-alpha">
<li>どうして読むのか</li>
<li>Haskellが好きで背後で使われている技術を知りたくなったから</li>
</ol>
<p><a href="http://tapl.proofcafe.org/home">日本語のサポートページ</a>が準備されています。 また、<a href="https://estore.ohmsha.co.jp/titles/978427406911P">出版元のページ</a>から第一章が無料で読めます。</p>
<p>通読したのちにまた記事を書こうと思っています。</p>
<!--more-->
<h2 id="予備知識について">予備知識について</h2>
<p><a href="/posts/PreTaPL.html">このページに書いてあります</a></p>
<h2 id="tapl">TaPL</h2>
<blockquote>
<p>型システムとは、プログラミング言語の安全性や効率を高めるうえで重要な理論・手法です。本書は、その型システムについて基礎的な話題を網羅し、実装例を交えて丁寧に解説したThe MIT Press発行の解説書“Types And Programming Languages”（TAPL）を翻訳したものです。言語設計者や学生だけでなく、静的型付言語を深く理解して活用したいプログラマーにとっても貴重な情報となっています。 <a href="http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948" class="uri">http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
サポートサイトができたらジュンク堂トークのPDFも載ると思いますが、これだけは先に：型システム入門(TAPL)はとりあえず1,3,8,5,9,11章（＆2章の必要な部分）と、あとは好きな章を読めば「読んだ」ことにしても良いと思います！（60%本気）
</p>
— Eijiro Sumii (<span class="citation">@esumii</span>) <a href="https://twitter.com/esumii/status/315135694462939137">2013年3月22日</a>
</blockquote>
<h4 id="第1章-はじめに">第1章 はじめに</h4>
<p>型を導入する意義や、型についての面白い話が書かれています。</p>
<h4 id="第2章-数学的準備">第2章 数学的準備</h4>
<p>数学の公式や前提として必要な知識が列挙されています、ここで馴染の無い物があれば読むのを中断し、いちどその分野の知識を補うべきだとしていますが私は強行を決めました。</p>
<h2 id="第1部-型無しの計算体系">第1部 型無しの計算体系</h2>
<h4 id="第3章-型無し算術式">第3章 型無し算術式</h4>
<p>簡単な言語の構文を定義して意味論や項を操作したりしている。</p>
<!-- - 操作的意味論: 抽象機械を定義してプログラミング言語の振舞いを規定、機械の振舞いを遷移関数を使用して定義する。 -->
<!-- - 表示的意味論: 項を数値や関数として捉えてモデル化。 -->
<!-- - 公理的意味論: 言語の定義そのものが法則となる、項の意味は項の照明そのもの。 -->
<ul>
<li>正規形
<ul>
<li>もう項が評価できない、という意味である。 <code>if t1 then t2 else t3</code> は評価できるが、 <code>true</code> はもう評価できない。</li>
<li><del>正規形であるならば値である。</del></li>
<li>項が正規形であるにかかわらず値ではない場合を『行き詰まり状態』と言う。</li>
<li>すべての項に対して、ある正規形が存在する</li>
</ul></li>
<li>多ステップ評価
<ul>
<li>1ステップ評価を合成したやつだと理解しておいた。</li>
</ul></li>
</ul>
<!-- #### 第4章	算術式のML実装 -->
<h4 id="第5章-型無しラムダ計算">第5章 型無しラムダ計算</h4>
<ul>
<li>なんとなく分かったら、<a href="http://tarao.hatenablog.com/entry/20100208/1265605429">ラムダ計算基礎文法最速マスター</a>にあっさりと書かれているので読むといいかも。</li>
<li><span class="math inline">\(\lambda\)</span>(Lambda)計算
<ul>
<li>全ての計算が関数定義と関数適用で表される(trueやfalse、数も関数!)</li>
<li>複雑なプログラミング言語のエッセンスは小さな核となる計算の集まりとして定式化できる、という事で生まれた。</li>
</ul></li>
<li>Lambda計算はプログラミング言語であると共に証明可能な数学的対象。</li>
<li>Lambda計算に似たようなものに<span class="math inline">\(\pi\)</span>計算やオブジェクト計算がある(本書では扱わないらしいが)
<ul>
<li><dl>
<dt><a href="http://web.yl.is.s.u-tokyo.ac.jp/kobalab/kadai99/picalc.html">π-calculus 超入門</a></dt>
<dd>もしかしてアクターモデルの原点？
</dd>
</dl></li>
</ul></li>
<li>自由変数の無い項を「閉じている」もしくは「コンビネータ」という。
<ul>
<li><span class="math inline">\(\lambda x.\; x\)</span> 例えばこの恒等関数はコンビネータである。</li>
<li><span class="math inline">\(\lambda x.\; y\)</span> この項はコンビネータではない。</li>
</ul></li>
<li><span class="math inline">\((\lambda x.\; x) y\)</span> は <span class="math inline">\(y\)</span> と評価される。</li>
<li>項 <span class="math inline">\((\lambda x.\; x\; (\lambda x.\; x))\; (u\; r)\)</span> は <span class="math inline">\(u\; r\; (\lambda x.\; x)\)</span> と評価される。
<ul>
<li>この操作をベータ簡約といい、簡約可能な項を簡約基と言う。</li>
</ul></li>
<li>ラムダ計算の評価戦略は数種類あり、プログラミング言語によっても違う。
<ul>
<li>Haskellは名前呼び戦略の変種である必要呼び戦略</li>
<li>大多数の言語では値呼び戦略</li>
</ul></li>
<li>以下は名前呼び簡約の例です。</li>
</ul>
<p><span class="math display">\[
\quad         \underline{ id\;(id\;(\lambda z.\; id\; z)) }\\ 
\rightarrow\; \underline{ id\;(\lambda z.\; id\; z) }\\
\rightarrow\; \lambda z.\; id\; z\\
\nrightarrow
\]</span></p>
<ul>
<li>以下は値呼び簡約の例です。</li>
</ul>
<p><span class="math display">\[
\quad\;       id\;(\underline{ id\;(\lambda z.\; id\; z)})\\
\rightarrow\; \underline{id\;(\lambda z.\; id\; z) }\\
\rightarrow\; \lambda z.\; id\; z\\
\nrightarrow
\]</span></p>
<ul>
<li>値呼び評価は「正格」名前呼び戦略は「非正格」もしくは「遅延評価」と呼ばれる。</li>
<li>純粋なラムダ計算でもブール値や数の表現、またその評価は出来る
<ul>
<li>純粋なラムダ計算ではTrueとFalseを以下のように表現する。</li>
<li><span class="math inline">\(true\; =\; \lambda t.\; \lambda f.\; t;\\false\; =\; \lambda t.\; \lambda f.\; f;\)</span></li>
<li>面倒、なので必要に応じて拡張して使ったりする。</li>
<li>関数定義と関数適用で数をどのように表すかというとチャーチ数というものがある。</li>
</ul></li>
<li>正規形に評価できない項が存在する。
<ul>
<li><span class="math inline">\(omega\; =\; (\lambda x. x\; x)\; (\lambda x. x\; x);\)</span></li>
<li>簡約基を一つだけ持っているが、簡約すると<span class="math inline">\(omega\)</span>そのものになるためである。</li>
<li>これを発散という。</li>
</ul></li>
<li><span class="math inline">\(omega\)</span>コンビネータには不動点コンビネータと呼ばれる一般化がある。
<ul>
<li>Haskellが分かるならtanakh氏の<a href="http://d.hatena.ne.jp/tanakh/20040813">不動点演算子</a>の記事が面白いかも。</li>
</ul></li>
</ul>
<h4 id="第6章-項の名無し表現">第6章 項の名無し表現</h4>
<ul>
<li><a href="http://ryna4c2e.hatenablog.com/entry/20141023/1414077068">de Bruijn indexについての備忘録</a>が参考になると思います。</li>
<li>代入等を可能にするため、変数に適宜新しい名前を与えたい。</li>
<li>そのためには様々な方法があります。
<ul>
<li>本著では「de Bruijinインデックス」<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>を使用しています。</li>
</ul></li>
<li>de Bruijinインデックス
<ul>
<li>変数を名前から解放したい。</li>
<li>束縛しているLambdaからどれだけ遠い(深い)かを自然数で表します。</li>
<li>例
<ul>
<li><span class="math inline">\(\lambda x.\; x \Rightarrow \lambda .\; 0\)</span></li>
<li><span class="math inline">\(\lambda x.\lambda y.\; y\; x \Rightarrow \lambda.\lambda. \; 0\; 1\)</span></li>
<li><span class="math inline">\(foo = (\lambda x. (\lambda x. x)) (\lambda x. x); \Rightarrow foo = (\lambda .\lambda . 0) (\lambda . 0);\)</span></li>
<li><span class="math inline">\(\lambda\)</span> の数より多い数値の場合、自由変数を指す。例えば <span class="math inline">\(\lambda .1\; 0\)</span> の <span class="math inline">\(1\)</span> は自由変数</li>
</ul></li>
<li>名無し項より自由変数を含むかどうか判別が簡単。</li>
<li>実装が間違えていた場合壊滅的に失敗する、これはバグを発見しやすいというメリットになります。なので本書ではde Bruijinインデックスを採用しています。</li>
</ul></li>
<li>シフト
<ul>
<li>de Bruijinインデックスを導入すると、代入の際自由変数のみインデックスを変更する必要が出てくる。</li>
</ul></li>
</ul>
<p>自由変数にインデックスを割り当てます。 <span class="math display">\[
\gamma =    foo \mapsto 2 \\
\qquad      bar \mapsto 1 \\
\qquad\quad z   \mapsto 0
\]</span></p>
<p>Lambda式です。 <span class="math display">\[
foo = \lambda x. \lambda y. z \\
bar = \lambda x. foo\; x
\]</span></p>
<p>変数をde Bruijinインデックスで表現します。 <span class="math display">\[
foo = \lambda . \lambda . 2 \\
bar = \lambda . 3\; 0
\]</span></p>
<p><code>foo</code>をインライン化します。 <code>bar</code>のLambdaの一つ内側に入る訳ですから、1個シフトする必要があります。<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<p><span class="math display">\[
bar = \lambda . (\lambda . \lambda . 3)\; 0
\]</span></p>
<p><span class="math inline">\(\beta\)</span>簡約をしましょう。Lambdaが一つ減るたびに、インデックスを一小さくする必要があります。</p>
<p><span class="math display">\[
bar = \lambda . \lambda . 2
\]</span></p>
<!-- #### 第7章	ラムダ計算のML実装 -->
<h2 id="第2部-単純型">第2部 単純型</h2>
<h4 id="第8章-型付き算術式">第8章 型付き算術式</h4>
<ul>
<li>進行定理
<ul>
<li>正しく型付けされた項は行き詰まり状態に陥らない。</li>
</ul></li>
<li>保存定理
<ul>
<li>正しく型付けされた項が評価できるならば、評価後の項も正しく型付けされている。</li>
</ul></li>
<li>以上二つの定理を満たしたものを型安全<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>である、と言われる。</li>
</ul>
<h4 id="第9章-単純型付きラムダ計算">第9章 単純型付きラムダ計算</h4>
<ul>
<li>Lambda抽象を型として扱う<span class="math inline">\(\rightarrow\)</span>型
<ul>
<li>これだと<span class="math inline">\((\lambda x. 0) true\)</span>のような時に型がつけられない</li>
<li>これでは書きたいプログラムに型が割り当てられないことが多々ある</li>
</ul></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">foo <span class="fu">=</span> <span class="kw">if</span> <span class="fu">&lt;</span>長く複雑な式<span class="fu">&gt;</span>
	<span class="kw">then</span> true
	<span class="kw">else</span> print <span class="st">&quot;ERROR&quot;</span></code></pre></div>
<p>このHaskellのプログラムでは型エラーでコンパイルが通らない。</p>
<blockquote>
<p>ラムダ計算はチューリング完全なので正格な型解析は不可能である – P. 75 9.1章</p>
</blockquote>
<ul>
<li><dl>
<dt>ちょっとよく分からない</dt>
<dd><span class="math inline">\(omega\)</span>等発散してしまう場合に無限を扱えないため？
</dd>
</dl></li>
<li>型付きラムダ計算は<span class="math inline">\(\lambda _\rightarrow\)</span>と表記される_</li>
<li>導入規則: その型の要素がどのように作られるか</li>
<li>除去規則: その型の要素がどのように使われるか</li>
<li>論理学と型理論のふしぎな関連はCurry-Howard対応<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>として知られている
<ul>
<li><a href="https://ja.wikibooks.org/wiki/Haskell/%E3%82%AB%E3%83%AA%E3%83%BC%3D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B">Haskell/カリー=ハワード同型</a>が面白い</li>
</ul></li>
<li>カリー・ハワード同型対応入門もわかりやすかった
<ul>
<li>第一回: <a href="http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward.pdf" class="uri">http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward.pdf</a></li>
<li>第二回: <a href="http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward2.pdf" class="uri">http://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward2.pdf</a></li>
</ul></li>
<li>型注釈は評価においてはなんの役割も果たさない</li>
<li>たいていのプログラムは実行時に型無しの項にもどされる
<ul>
<li><a href="https://kagamilove0707.github.io/programming/2014/02/20/about-phantom-type/">型安全なリストを作るのです(｀・ω・´) ～ その1、Phantom Type（幽霊型）入門ですー＞ω＜</a>が面白い</li>
</ul></li>
</ul>
<!-- #### 第10章	単純型のML実装 -->
<h4 id="第11章-単純な拡張">第11章 単純な拡張</h4>
<ul>
<li></li>
</ul>
<!--
  #### 第12章	正規化
  #### 第13章	参照
  #### 第14章	例外
  
  ## 第3部	部分型付け
  #### 第15章	部分型付け
  #### 第16章	部分型付けのメタ理論
  #### 第17章	部分型付けのML実装
  #### 第18章	事例：命令的オブジェクト
  #### 第19章	事例：Featherweight Java
  
  ## 第4部	再帰型
  #### 第20章	再帰型
  #### 第21章	再帰型のメタ理論
  
  ## 第5部	多相性
  #### 第22章	型再構築
  #### 第23章	全称型
  #### 第24章	存在型
  #### 第25章	System F のML実装
  #### 第26章	有界量化
  #### 第27章	事例：命令的オブジェクト再考
  #### 第28章	有界量化のメタ理論
  
  ## 第6部	高階の型システム
  #### 第29章	型演算子とカインド
  #### 第30章	高階多相
  #### 第31章	高階部分型付け
  #### 第32章	事例：純粋関数的オブジェクト
  
  ## 付録A	演習の解答
  ## 付録B	記法
-->
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>「de Brujin項」とも呼ばれるそうです。日本語ではド ブラウンと読むのが一番近いそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>数式に起こすと <span class="math inline">\(\uparrow ^2 (\lambda . \lambda . 2)\)</span><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>健全性とも言われる<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Curry-Howard同型ともよばれる<a href="#fnref4">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/TaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>TaPLに必要な知識の学習記録</title>
    <link>https://eliza.link/posts/PreTaPL.html</link>
    <description><![CDATA[<a href="/posts/PreTaPL.html"><h1>TaPLに必要な知識の学習記録</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLを読むのために少し勉強したのでメモを残しておきます。 内容の真偽の保証はできません。必要に応じて追記していきます。</p>
<p><a href="http://zoetrope.hatenablog.jp/entry/2013/07/24/204613">数学初心者のための「型システム入門」入門</a>によると前提として以下の知識が必要になるようです。</p>
<blockquote>
<ul>
<li>数学(離散数学、アルゴリズム、論理学)</li>
<li>高階関数型プログラミング言語(Scheme、ML、Haskellなど)</li>
<li>コンパイラの基礎的な概念(抽象構文、BNF文法、評価、抽象機械など)</li>
</ul>
</blockquote>
<p>TaPLの読書記録は<a href="/posts/TaPL.html">このページ</a>に載っています。</p>
<!--more-->
<h2 id="論理学">論理学</h2>
<ul>
<li><a href="http://abelard.flet.keio.ac.jp/person/mitsu/pdf/nyumon_logic.pdf">「論理学入門」講義ノート</a>が論理学で検索してヒットしたものの中で一番容易に読み進めることができそうだったので読み流した(証明は追いかけるの面倒だったので飛ばした)。</li>
<li>記号がダメな人はアレルギーをおこしそうな分野でした、印刷したテキストをうっかり直視した友人は帰らぬ人となりました。(まあプログラマは大丈夫だと思う)</li>
<li>後日みつけた資料ですが、こちらのほうが易しく書かれています。 <a href="http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf" class="uri">http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf</a></li>
</ul>
<h2 id="集合論">集合論</h2>
<p>論理学とあわせて、何かを表現する際の述語を勉強している気分です。</p>
<ul>
<li>TaPLの冒頭に集合がなんだかんだと書かれていたので勉強が必要だと思い、<a href="http://www.math.twcu.ac.jp/~yamauchi/text/2012/alg2012/set_logic.pdf">東京女子大学の代数学IA(集合と論理)のテキスト</a>を読んでみました。
<ul>
<li>私の環境では途中で組版がすこし崩れています。</li>
<li>これを読むのは論理学のテキストを読んだ後が良いです。</li>
</ul></li>
<li>「集合・位相入門」を今読んでいます。 <a href="https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html" class="uri">https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html</a></li>
</ul>
<h2 id="離散数学">離散数学</h2>
<p>いつかやりたいなぁ…</p>
<h2 id="ラムダ計算">ラムダ計算</h2>
<ul>
<li><a href="http://language-and-engineering.hatenablog.jp/entry/20130313/LambdaCalculusBasicNoteLinks">「ラムダ計算」を独学で学習するための，講義ノートやPDFのリンク集 （復習用の問題付き）</a>に詳しくまとまっています。</li>
</ul>
<h2 id="アルゴリズム">アルゴリズム</h2>
<p>ダメです。</p>
<h2 id="高階関数型プログラミング言語">高階関数型プログラミング言語</h2>
<ul>
<li>まあまあHaskellが書けるので問題はなさそうと慢心。TaPLのサンプルコードはOCaml(MLの方言)で書かれていました。</li>
<li>Haskellで書かれたサンプルコードは <a href="https://github.com/zerokarmaleft/tapl-haskell" class="uri">https://github.com/zerokarmaleft/tapl-haskell</a> ここにありました。さまざまな言語に有志が翻訳しています。</li>
<li>サンプルコードの実装にパーサを書かなければいけないみたいなので、ekmett氏の<a href="http://hackage.haskell.org/package/trifecta">trifecta</a>を使っています。</li>
</ul></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/PreTaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Haskellでブログを作った</title>
    <link>https://eliza.link/posts/create_blog_with_hakyll.html</link>
    <description><![CDATA[<a href="/posts/create_blog_with_hakyll.html"><h1>Haskellでブログを作った</h1>
</a>
<ul class="article_data"><li>  Posted on August 27, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/hakyll.html">hakyll</a></li>
</ul>
<section class="article_text"><p>以前からはてなブログなどで記事は書いていたんですが、どうしてもモチベーションも保てず、なんだか嫌になってブログを削除したことがあります。 しかし、やっぱり記事は書くべき時が来ますし、それでせっかくブログを作るならもっと自由にカスタマイズできる環境であればより楽しく続けられると思ったので、HakyllとShakespeare、そしてClayを使い、私の好きなHaskellでブログを作りました。</p>
<p>記事をかいた当時のこのページのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。 また、最新版は<a href="https://github.com/eliza0x/eliza0x.github.io">ここ</a>に公開しています。</p>
<!--more-->
<h2 id="hakyllでウェブサイトの生成">Hakyllでウェブサイトの生成</h2>
<p>HTMLやCSS, JavaScriptなど、手元で完結するようなウェブサイトの事を静的サイトと言うようです(間違っていたらごめんなさい)、そんな静的なサイトをうまいこと生成してくれるプログラムがそれはそれは沢山ある <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> のですが、その中から私はHaskellでブログを作りたかったのでHakyllを選択しました。</p>
<p><a href="https://jaspervdj.be/hakyll/">Hakyllの公式サイト</a></p>
<p>公式ページによると小〜中規模のサイト向けだそうです、使ってみてブログ以外でも割と使えるんじゃないかと思いました。</p>
<h2 id="とりあえず記事は楽して書きたい">とりあえず記事は楽して書きたい</h2>
<p><a href="http://pandoc.org/">Pandoc</a>を知っていますか？MarkdownやreStructuredText(reSTの呼称のほうが一般的？)などで書かれたドキュメントをHTMLやTeX, 果てはWord docs形式に変換してくれる便利なソフトウェアです。</p>
<p>HakyllはPandocを容易に利用することが出来るよう設計されているので、記事をMarkdownやreSTで書く事が出来ます。便利ですね。</p>
<p>また、Pandocの機能で数式や脚注を埋め込めます。</p>
<p><span class="math display">\[\ln x = \int_{-\infty}^x \frac 1 y \, dy .\]</span></p>
<p>具体的に何が出来るかや、どんなフォーマットに対応しているかは、有志によるPandocのユーザーズガイドを参照すれば良いと思います。</p>
<p><a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド(和訳版)</a></p>
<p>私の手元のPandoc(version 1.17.1)は以下のフォーマットに対応していました。</p>
<pre><code>Input formats:
commonmark, docbook, docx, epub, haddock, html, json*, latex,
markdown, markdown_github, markdown_mmd, markdown_phpextra,
markdown_strict, mediawiki, native, odt, opml, org, rst, t2t,
textile, twiki
[ *only Pandoc&#39;s JSON version of native AST]

Output formats: 
asciidoc, beamer, commonmark, context, docbook, docbook5, docx,
dokuwiki, dzslides, epub, epub3, fb2, haddock, html, html5,
icml, json*, latex, man, markdown, markdown_github,
markdown_mmd, markdown_phpextra, markdown_strict, mediawiki,
native, odt, opendocument, opml, org, pdf**, plain, revealjs,
rst, rtf, s5, slideous, slidy, tei, texinfo, textile
[**for pdf output, use latex or beamer and -o FILENAME.pdf]</code></pre>
<p>ちなみにCSSさえ準備してしまえば、version1.17.1の場合以下の言語のシンタックスハイライトにも対応しています。この話は後でもうすこし書きます。</p>
<pre><code>Syntax highlighting is supported for the following languages:
abc, actionscript, ada, agda, apache, asn1, asp, awk, bash, bibtex, boo, c,
changelog, clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css,
curry, d, diff, djangotemplate, dockerfile, dot, doxygen, doxygenlua, dtd,
eiffel, elixir, email, erlang, fasm, fortran, fsharp, gcc, glsl,
gnuassembler, go, hamlet, haskell, haxe, html, idris, ini, isocpp, java,
javadoc, javascript, json, jsp, julia, kotlin, latex, lex, lilypond,
literatecurry, literatehaskell, llvm, lua, m4, makefile, mandoc, markdown,
mathematica, matlab, maxima, mediawiki, metafont, mips, modelines, modula2,
modula3, monobasic, nasm, noweb, objectivec, objectivecpp, ocaml, octave,
opencl, pascal, perl, php, pike, postscript, prolog, pure, python, r,
relaxng, relaxngcompact, rest, rhtml, roff, ruby, rust, scala, scheme, sci,
sed, sgml, sql, sqlmysql, sqlpostgresql, tcl, tcsh, texinfo, verilog, vhdl,
xml, xorg, xslt, xul, yacc, yaml, zsh</code></pre>
<p>聞いた事の無いようなものまで混じってしますね。</p>
<p>HakyllではこんなコードでPandocを呼び出し、ページを生成できます、実際このコードが動くかは知りません。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compile <span class="fu">$</span> pandocCompiler 
  <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/flame.hamlet&quot;</span> postCtx
  <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div>
<h2 id="shakespearean-templates">Shakespearean Templates</h2>
<p>いくら記事のHTMLを自動生成してくれるからといって、デザインは自分で行わないといけません。しかし、HTMLやCSSを生で書きたくない。始めはSass(CSSのめっちゃすごいやつ)とJade(Htmlのめっちゃすごいやつ)をつかおうと思っていたのですが、折角ならPure Haskellでブログを作ってみようと思い、Yesod Frameworkで使用されているShakespeareを使ってみました。</p>
<p>Shakespearean Templatesはテンプレート言語です、数あるテンプレート言語の中でこの言語が優れている点はHaskellとの連携が容易な点です。シームレスにHaskellの関数が呼び出せたりごにょごにょ。</p>
<blockquote>
<p>Shakespearean Templatesとは、Webコンテンツを構成するテキストをHaskell/Yesodで生成する、下記のテンプレート言語群のことです。</p>
<ul>
<li>Hamlet(HTML)</li>
<li>Julius(JavaScript)</li>
<li>Cassius(CSS)</li>
<li>Lucius(CSS)</li>
</ul>
<p><a href="https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates" class="uri">https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates</a></p>
</blockquote>
<p>詳しく知りたければ<a href="http://www.yesodweb.com/book/shakespearean-templates">このチュートリアル</a>でも読めば良いんじゃないでしょうか。</p>
<p>HakyllとHamletの連携が面倒だったのでライブラリを書きました、よければ使ってください。<br />
<a href="https://github.com/eliza0x/hakyll-shakespeare" class="uri">https://github.com/eliza0x/hakyll-shakespeare</a></p>
<p>こんなふうに使えます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;templates/*.hamlet&quot;</span> <span class="fu">$</span> compile hamlTemplateCompiler</code></pre></div>
<h2 id="clay射撃">Clay射撃</h2>
<p><del>CSSはCassiusを利用して<a href="http://getskeleton.com/">Skeleton</a>や<a href="https://milligram.github.io/">Milligram</a>を参考にしつつもがんばって一から書きました。</del></p>
<p>ClayというモナドベースのCSSプリプロセッサーがHakyll公式で推されていたので使ってみると予想以上に面白かったので、一度Cassiusで書いたCSSをClayで書き換えました。良いですよ、Clay。</p>
<p>HTMLもこういったライブラリで生成したいのは山々なんですが、Hakyllの柵 <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> で面倒くさそうです。</p>
<p>出来るだけシンプルにしようと心掛けて作ったのですが、<a href="yamasy.info">やましー</a>の言葉を借りるとお葬式みたいな配色になってしまいました。まあまあ気にいっていますが。</p>
<p>こんなコードです、動くかは知りません。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> putCss css

<span class="ot">fontColor ::</span> <span class="dt">Color</span>
fontColor <span class="fu">=</span> <span class="st">&quot;#303030&quot;</span>

<span class="ot">css ::</span> <span class="dt">Css</span>
css <span class="fu">=</span> <span class="kw">do</span>
  html <span class="fu">?</span> fontSize (pct <span class="fl">62.5</span>)
  p <span class="fu">?</span> <span class="kw">do</span>
    marginTop nil
    marginBottom (rem <span class="fl">3.0</span>)
  a <span class="fu">?</span> <span class="kw">do</span>
    textDecoration none
  a <span class="fu">#</span> hover <span class="fu">?</span> color secondColor</code></pre></div>
<p>公式サイトです、チュートリアルやサンプルコードもここにあります。</p>
<p><a href="http://fvisser.nl/clay/" class="uri">http://fvisser.nl/clay/</a></p>
<h2 id="コーディング">コーディング</h2>
<p>私は<a href="https://github.com/jaspervdj/jaspervdj">作者の公開されているソースコード</a>や、<a href="http://tanakh.jp/posts/2011-11-05-haskell-infra.html">tanakhさんのブログ</a>,それと<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part1.html">Imokuri氏のブログ</a>を参考にさせていただきました。もちろん<a href="https://hackage.haskell.org/package/hakyll-4.8.3.2">HakyllのHackage</a>もです、ありがとうございます。</p>
<p>とりあえずImokuri氏のブログを読んでなんとなく摑んでから、作者のプログラムでも読めばいいんじゃないかと思います。</p>
<p>またブログを始める際、Markdownは知ってるよ、という人でも<a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド</a>は読んでおいたほうが良いと思います。Pandocならではの拡張が非常に便利なので、これを使わない手は無いです。</p>
<h2 id="シンタックスハイライト">シンタックスハイライト</h2>
<p>ブログのソースコードはハイライトして欲しいです。以前nanoでプログラムのデバッグをしたとき死ぬかと思いました。</p>
<p>始めはhighlight.jsでも使おうかなあなんて思っていたんですが、Pandocはシンタックスハイライトをしてくれるそうなので、染色の為に専用のCSSを準備しましょう。<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part4.html">Imokuriさんのこのページ</a>に詳しく載っています。もしくは<a href="https://github.com/eliza0x/eliza0x.github.io">私の書いたソースコード</a>でも読むと良いでしょう。</p>
<p>こんなコードです、動くかは知りません。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span>
  create [<span class="st">&quot;css/highlight.css&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
    route   idRoute
    compile <span class="fu">$</span> makeItem (compressCss <span class="fu">$</span> styleToCss tango)</code></pre></div>
<h2 id="コメントフォーム">コメントフォーム</h2>
<p>私の記事について質問があった時などに、メールを送ったりするのはハードルが高いかなと思ったので、コメンドフォームをDISQUSで設けました。はじめは自分で作る気でいたのですが、 <del>面倒だった</del> スパムコメントなどが怖かったのでアウトソーシングしました。デザインも可愛く気に入っています。</p>
<p>公式サイトの指示どおりにすると動かなかったので、<a href="tanakh.jp">tanakh氏のブログ</a>のソースコードを参考にさせて頂きました。</p>
<p><a href="https://disqus.com/">DISQUS</a></p>
<h2 id="終わりに">終わりに</h2>
<p>設定がMonoidのインスタンスになっていて <code>&lt;&gt;</code> で追加の設定を追加できるのが凄く便利でした。 Hakyll自体を実際に弄ってみて、型クラスについての知識が深まりました。</p>
<p>もうすこしCSSを書かないとまだまだ粗が目立ちますね。ブログを作るのも結構大変だ… Clayを使ってみてなかなか良いなぁと思ったので、HTMLもそういったもので書き出すかもしれないです。</p>
<p>あとClay等プリプロセッサをオンデマンドでコンパイルしてHakyllから便利に扱えるようにするラッパーを書きたいですね。hintとか使えばうまくいくのかな…？</p>
<p>最後に、このサイトはGihub Pagesにて公開してあります。Github PagesはGitの使い方を知らないと利用するのは難しいかもしれないですが非常に便利です、いかがですか?</p>
<p>このブログのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。</p>
<h4 id="紹介できなかったサイト">紹介できなかったサイト</h4>
<p>Github Pagesで独自ドメインを利用するために参考にしたものです。</p>
<ul>
<li><a href="http://qiita.com/mikakane/items/87c8f676815da4e5ac04">Github Pagesの使い方</a></li>
<li><a href="http://qiita.com/tiwu_official/items/d7fb6c493ed5eb9ee4fc">GitHub Pagesで静的なサイトを公開し、独自ドメインを設定する</a></li>
<li><a href="http://qiita.com/superbrothers/items/95e5723e9bd320094537">カスタムドメインの GitHub Pages で HTTPS を使う</a></li>
</ul>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://www.staticgen.com/">StaticGen</a> というサイトにまとまっています。静的サイトジェネレータのうちで有名なものといえばPelican(Python), Jekyll(Ruby), GitBook(JavaScript), Hugo(Go)などがあるでしょうか。おもしろそうなものでは、Lispで書かれたColeslawなんてものもあるそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>テンプレートの呼び出しのあたり<a href="#fnref2">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Sat, 27 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/create_blog_with_hakyll.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Blink on AtTiny85</title>
    <link>https://eliza.link/posts/AtTiny85a.html</link>
    <description><![CDATA[<a href="/posts/AtTiny85a.html"><h1>Blink on AtTiny85</h1>
</a>
<ul class="article_data"><li>  Posted on August  8, 2016</li>

<li> Tags: <a href="/tags/programming.html">programming</a>, <a href="/tags/microprocessor.html">microprocessor</a>, <a href="/tags/arduino.html">arduino</a></li>
</ul>
<section class="article_text"><p><a href="https://twitter.com/mc475_46">もは氏/mc475_46</a>の勧めもあってついにAVRマイコンに手を出してみました。後悔するのは後になってからでも構わないでしょう。 自分の書いたプログラムがPCの外で動いているというのは新鮮ですし、マイコンはプログラミングと日常をつないでくれるような気がしてなんだかとても楽しいです。</p>
<p>PlatformIOでFT232RLを使ってAtTiny85(AVR)に書き込んでいる記事なネットでみつけられなくて苦労したのでこの記事を書きました。</p>
<!--more-->
<h2 id="tldr">TL;DR</h2>
<p><a href="#プログラムを書き込む">ここ</a>のプログラムを参照して</p>
<p>結線後に<code>./src/main.ino</code>と<code>./platformio.ini</code>にファイルを配置して<code>platformio run -t upload</code>すればOK。</p>
<h2 id="長い文章を読める人類向け">長い文章を読める人類向け</h2>
<p>回路図も作ってがんばって記事を書くつもりでしたが、Fritzing(可愛い回路図をつくれるソフト)のビルドが目の前でSegmentation faultを投げてから心が終わってしまったのでそれほど長い記事にはならない筈です。</p>
<p>さて、今回目指すのはAVR ーわたしが取り組んだのはAtTiny85ですが、おおよそ同じ手順でAVRのマイコン全般は動作する事でしょうー でBlink(Lチカ)をすることです。</p>
<p>ArduinoIDEなどGUIからでも出来るようですが、IDEはVimが使えないので面倒です。なので今回はPlatformIOというソフトウェアでコンパイルから書き込みまで行おうと思います。</p>
<h2 id="attiny85">AtTiny85?</h2>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">データシート</a></p>
<p>AVRはAtmel社が作っているRISCのマイコンです。AtTiny85はそのAVRのうちのTinyシリーズに属するもので、Tiny(ちっぽけ)の名にふさわしくピンは8本しかありません、さらにそのうちの2PINは電源に使用するので我々は6PINしか使う事が出来ません。しかしDIP版でもわずか1cm * 1cmのマイコンにはROMが8Kbyte,RAMが512Byteも搭載されています、必要十分ではないでしょうか。</p>
<div class="figure">
<img src="/images/AtTiny85.jpg" alt="画像は秋月電子様より" />
<p class="caption">画像は秋月電子様より</p>
</div>
<h2 id="platformio">PlatformIO？</h2>
<blockquote>
platformioがすごいのは、IDEが必要ないということだ。inoは別途IDEが必要だったがplatformioは必要ない。パッケージとして自動でダウンロードしてくれるのだ。さらにすごいのは様々な組み込みボードをサポートしている。 有名どころはばっちり抑えているようで、STM32 Nucleoなど最近のボードもサポートされている。<br />
<a href="http://qiita.com/caad1229/items/7b5fb47f034ae6e0baf2">Qiita - コマンドラインでArduino開発 : vim + platformio</a>
</blockquote>
<p>コマンド一つでそのマイコンに必要なソフトウェアをインストールしてくれたり、ライブラリのインストーラになったりする凄いソフトウェアです、上記のリンクの記事を読めばだいたいの使い方は分かると思います。</p>
<h2 id="ft232rl">FT232RL</h2>
<p>秋月電子さんが出しているUSB - Serial変換基盤です、FTDI社のFT232Rというチップを利用しているようです。特殊なモードでマイコンにプログラムを書き込みます。 専用の書き込み機を買うと結構値が張るのでありがたいですね。</p>
<h2 id="avrdude">Avrdude</h2>
<p><a href="http://www.nongnu.org/avrdude/">AVRDUDE is a utility to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in-system programming technique (ISP).</a></p>
<p>AVRマイコンにプログラムを書き込むのに、PlatformIOはバックエンドでこれを使用しているみたいです。</p>
<p>しかしAvrdudeもPlatformIOもインターネットに記事が少ない…苦労しました。</p>
<h2 id="プログラムを書き込む">プログラムを書き込む</h2>
<p>はじめにFT232Rのドライバをインストールしましょう、お好みのパッケージマネージャや<a href="http://www.ftdichip.com/Drivers/VCP.htm">FTDIのWebサイト</a>からダウンロードしてください。 普通にFT232Rを使用するだけならドライバは必要無いようなのですが、BitBangモードでFT232Rを使用するには専用のドライバが必要になるそうです。</p>
<p>BitBangモードについては、<a href="http://ore-kb.net/hard/BitBang/">この記事</a>にくわしく書かれていました。</p>
<p>つぎにPlatformIOをインストールしてください、これもパッケージマネージャや<a href="http://platformio.org/">公式サイト</a>からインストールできます。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> AtTiny85  
$ <span class="bu">cd</span> AtTiny85/  
$ <span class="ex">platformio</span> init -b attiny85  </code></pre></div>
<p>さあ、AtTiny85に書き込む準備は整いました</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">void</span> setup(){
  pinMode(<span class="dv">1</span>, OUTPUT);
}

<span class="dt">void</span> loop(){
  digitalWrite(<span class="dv">1</span> , HIGH);
  delay(<span class="dv">1000</span>);
  digitalWrite(<span class="dv">1</span> , LOW); 
  delay(<span class="dv">1000</span>);
}</code></pre></div>
<p><code>main.ino</code></p>
<div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[env:attiny85]</span>
<span class="dt">platform </span><span class="ot">=</span><span class="st"> atmelavr</span>
<span class="dt">framework </span><span class="ot">=</span><span class="st"> arduino</span>
<span class="dt">board </span><span class="ot">=</span><span class="st"> attiny85</span>
<span class="dt">upload_protocol </span><span class="ot">=</span><span class="st"> diecimila</span>
<span class="dt">upload_flags </span><span class="ot">=</span><span class="st"> -v -F -e -p t85 -B9600</span>
<span class="dt">board_f_cpu </span><span class="ot">=</span><span class="st"> 1000000L</span>
<span class="co"># upload_port = /dev/ttyUSB0</span></code></pre></div>
<p><code>platformio.ini</code></p>
<p>あとは<code>main.ino</code>を自動生成されたsrcディレクトリ下、<code>platformio.ini</code>を置き換えて下さい。</p>
<p>工夫しているのはPlatformIOの<code>upload_protocol</code>と<code>upload_flags</code>ぐらいで、Avrdude用にすこしオプションを書いてあるだけです。 マイコンをAtTiny85以外を使いたいなら、<code>board</code>の中身を変更してください。</p>
<p>具体的にどう変更すれば良いかわからなければ、<code>platformio boards</code> で一覧が表示されます。</p>
<p>さあ、あとは結線をするだけです。</p>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">Atmelのデータシート</a></p>
<p><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a#%E5%9B%9E%E8%B7%AF">結線はこのリンクを参考にしてください</a></p>
<p>さあ、出来ましたか？</p>
<div class="figure">
<img src="/images/Ft232rlToAttiny85.jpg" />

</div>
<p>それでは <code>$ platformio run -t upload</code> して下さい。</p>
<p>書き込めましたか？それではAtTiny85を差し替えてBlinkしてみましょう、AtTiny85のIOはこの通りになっています。</p>
<div class="figure">
<img src="/images/AttinyBlink.png" alt="画像はSparkFun様より" />
<p class="caption">画像はSparkFun様より</p>
</div>
<p>ArduinoでLEDを光らせていた時の1/10程度の大きさで同じことが実現できてしまいましたね、最高です。</p>
<div class="figure">
<img src="/images/Blink.jpg" alt="Blink" />
<p class="caption">Blink</p>
</div>
<p>なお、うまくいかない人はTwitterの@Eliza_0xか、me [at] eliza [dot] linkまでメールをくだされば、出来る限り手伝います。</p>
<h2 id="thanks">Thanks</h2>
<p>紹介できなかった私が参考にしたリンク達</p>
<ul>
<li><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a">FT232RLでAVRライターを自作してATtiny85をDigispark互換にするまで</a></li>
<li><a href="http://make.kosakalab.com/make/electronic-work/arduino-ide-arduinoisp/">Arduino IDEでATtiny他の開発（Arduino-ISP編）</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/tiny-avr-programmer-hookup-guide/attiny85-use-hints">Tiny AVR Programmer Hookup Guide</a></li>
<li><a href="http://techlife.cookpad.com/entry/2015/10/28/080000">電子工作に必要な道具達</a></li>
<li><a href="http://qiita.com/erukiti/items/1a517c3e424835ca14f1">ステップアップ電子工作/レベル1前編 ブレッドボードで電子工作を始めよう (まずは準備編)</a></li>
<li><a href="http://startelc.com/AVR/Avr_100timrMemo.html">AVRのタイマー</a></li>
<li><a href="http://qiita.com/tadfmac/items/3a42a641531f2c3679a1">ArduinoユーザーのためのATTiny入門</a></li>
<li><a href="http://www.ernstc.dk/arduino/38khz_timer.htm">Using timers to generate 38KHZ - for IR</a></li>
<li><a href="https://www40.atwiki.jp/system-ed/pages/16.html">C言語　演算子</a></li>
<li><a href="http://tyk-systems.com/ATmega328/ATmega328.html">Arduinoから取り外したATmega328を外付け水晶振動子(発振子)で動作させる。</a></li>
<li><a href="http://www.wsnak.com/wsnakblog/?p=4110">arduino(AVR)でキャリア波38KHzを発生させる</a></li>
</ul>
<p>他多数、関係企業とプログラマ達に感謝</p></section>
]]></description>
    <pubDate>Mon, 08 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/AtTiny85a.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>

    </channel>
</rss>
