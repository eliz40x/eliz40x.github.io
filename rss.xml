<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>All posts -  | ELIZA.link</title>
        <link>https://eliza.link</link>
        <description><![CDATA[技術録や日記を残します]]></description>
        <atom:link href="https://eliza.link/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 24 Mar 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Haskellでブログを作った</title>
    <link>https://eliza.link/posts/create_blog_with_hakyll.html</link>
    <description><![CDATA[<a href="/posts/create_blog_with_hakyll.html"><h1>Haskellでブログを作った</h1>
</a>
<ul class="article_data"><li>  Posted on March 24, 2017</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/hakyll.html">hakyll</a></li>
</ul>
<section class="article_text"><p>以前ははてなブログなどで記事は書いていたんですが、どうしてもモチベーションも保てず、なんだか嫌になってブログを削除してしまいました。 しかし、やっぱり参加したイベント等の記事は書きたい。それでせっかくブログを作るならもっと自由にカスタマイズできる環境であればより楽しく続けられると思ったので、HakyllとShakespeare、そしてClayを使い、私の好きなHaskellでブログを作りました。</p>
<p>記事をかいた当時のこのページのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。 また、最新版は<a href="https://github.com/eliza0x/eliza0x.github.io">ここ</a>に公開しています。</p>
<!--more-->
<h2 id="hakyllでウェブサイトの生成">Hakyllでウェブサイトの生成</h2>
<p>HTMLやCSS, JavaScriptなど、手元で完結するようなウェブサイトの事を静的サイトと言うようです(間違っていたらごめんなさい)、そんな静的なサイトをうまいこと生成してくれるプログラムがそれはそれは沢山ある <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> のですが、その中から私はHaskellでブログを作りたかったのでHakyllを選択しました。</p>
<p><a href="https://jaspervdj.be/hakyll/">Hakyllの公式サイト</a></p>
<p>公式ページによると小〜中規模のサイト向けだそうです、使ってみてブログ以外でも割と使えるんじゃないかと思いました。</p>
<h2 id="とりあえず記事は楽して書きたい">とりあえず記事は楽して書きたい</h2>
<p><a href="http://pandoc.org/">Pandoc</a>を知っていますか？MarkdownやreStructuredText(reSTの呼称のほうが一般的？)などで書かれたドキュメントをHTMLやTeX, 果てはWord docs形式に変換してくれる便利なソフトウェアです。</p>
<p>HakyllはPandocを容易に利用することが出来るよう設計されているので、記事をMarkdownやreSTで書く事が出来ます。便利ですね。</p>
<p>また、Pandocの機能で数式や脚注を埋め込めます。</p>
<p><span class="math display">\[\ln x = \int_{-\infty}^x \frac 1 y \, dy .\]</span></p>
<p>具体的に何が出来るかや、どんなフォーマットに対応しているかは、有志によるPandocのユーザーズガイドを参照すれば良いと思います。</p>
<p><a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド(和訳版)</a></p>
<p>私の手元のPandoc(version 1.19.2.1)は以下のフォーマットに対応していました。</p>
<pre><code>Input formats:

commonmark, docbook, docx, epub, haddock, html, json, latex, markdown, markdown_github, markdown_mmd, markdown_phpextra, markdown_strict, mediawiki, native, odt, opml, org, rst, t2t, textile, twiki

Output formats:

asciidoc, beamer, commonmark, context, docbook, docbook5, docx, dokuwiki, dzslides, epub, epub3, fb2, haddock, html, html5, icml, json, latex, man, markdown, markdown_github, markdown_mmd, markdown_phpextra, markdown_strict, mediawiki, native, odt, opendocument, opml, org, plain, revealjs, rst, rtf, s5, slideous, slidy, tei, texinfo, textile, zimwiki</code></pre>
<p>ちなみにCSSさえ準備してしまえば、version1.17.1の場合以下の言語のシンタックスハイライトにも対応しています。この話は後でもうすこし書きます。</p>
<pre><code>Syntax highlighting is supported for the following languages:

abc, asn1, asp, ats, awk, actionscript, ada, agda, alertindent, apache, bash, bibtex, boo, c, cs, cpp, cmake, css, changelog, clojure, coffee, coldfusion, commonlisp, curry, d, dtd, diff, djangotemplate, dockerfile, doxygen, doxygenlua, eiffel, elixir, email, erlang, fsharp, fortran, gcc, glsl, gnuassembler, m4, go, html, hamlet, haskell, haxe, ini, isocpp, idris, fasm, nasm, json, jsp, java, javascript, javadoc, julia, kotlin, llvm, latex, lex, lilypond, literatecurry, literatehaskell, lua, mips, makefile, markdown, mathematica, matlab, maxima, mediawiki, metafont, modelines, modula2, modula3, monobasic, ocaml, objectivec, objectivecpp, octave, opencl, php, pascal, perl, pike, postscript, prolog, pure, purebasic, python, r, relaxng, relaxngcompact, roff, ruby, rhtml, rust, sgml, sql, sqlmysql, sqlpostgresql, scala, scheme, tcl, tcsh, texinfo, mandoc, vhdl, verilog, xml, xul, yaml, yacc, zsh, dot, noweb, rest, sci, sed, xorg, xslt</code></pre>
<p>聞いた事の無いようなものまで混じってしますね。</p>
<p>HakyllではこんなコードでPandocを呼び出し、ページを生成できます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compile <span class="fu">$</span> pandocCompiler 
  <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/template.hamlet&quot;</span> postCtx
  <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div>
<h2 id="shakespearean-templates">Shakespearean Templates</h2>
<p>いくら記事のHTMLを自動生成してくれるからといって、デザインは自分で行わないといけません。しかし、HTMLやCSSを生で書きたくない。始めはSass(CSSを楽して書くためのもの)とJade(Htmlを楽して書くためのもの)をつかおうと思っていたのですが、折角ならPure Haskellでブログを作ってみようと思い、Yesod Frameworkで使用されているShakespeareを使ってみました。</p>
<p>Shakespearean Templatesはテンプレート言語です、数あるテンプレート言語の中でこの言語が優れている点はHaskellとの連携が容易な点です。シームレスにHaskellの関数が呼び出すことが出来ます。</p>
<blockquote>
<p>Shakespearean Templatesとは、Webコンテンツを構成するテキストをHaskell/Yesodで生成する、下記のテンプレート言語群のことです。</p>
<ul>
<li>Hamlet(HTML)</li>
<li>Julius(JavaScript)</li>
<li>Cassius(CSS)</li>
<li>Lucius(CSS)</li>
</ul>
<p><a href="https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates" class="uri">https://sites.google.com/site/toriaezuzakki/haskell/yesod/shakespearean-templates</a></p>
</blockquote>
<p>詳しく知りたければ<a href="http://www.yesodweb.com/book/shakespearean-templates">このチュートリアル</a>でも読めば良いんじゃないでしょうか。</p>
<p>HakyllとHamletの連携が面倒だったので、薄いラッパーを書きました、よければ使ってください。<br />
<a href="https://github.com/eliza0x/hakyll-shakespeare" class="uri">https://github.com/eliza0x/hakyll-shakespeare</a></p>
<p>こんなふうに使えます。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;templates/*.hamlet&quot;</span> <span class="fu">$</span> compile hamlTemplateCompiler</code></pre></div>
<h2 id="clay射撃">Clay射撃</h2>
<p><del>CSSはCassiusを利用して<a href="http://getskeleton.com/">Skeleton</a>や<a href="https://milligram.github.io/">Milligram</a>を参考にしつつもがんばって一から書きました。</del></p>
<p>ClayというモナドベースのCSSプリプロセッサーがHakyll公式で推されていたので使ってみると予想以上に面白かったので、一度Cassiusで書いたCSSをClayで書き換えました。良いですよ、Clay。</p>
<p>HTMLもこういったライブラリで生成したいのは山々なんですが、Hakyllの柵 <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> で面倒くさそうです。</p>
<p><del>出来るだけシンプルにしようと心掛けて作ったのですが、<a href="yamasy.info">やましー</a>の言葉を借りるとお葬式みたいな配色になってしまいました。まあまあ気にいっていますが。</del></p>
<p>追記: 2017/3/24</p>
<p>無駄な線一本入れないでやろうと、もういちどデザインをしなおしてみました。いいものになったと思いますが、やっぱりデザインは難しいですね。</p>
<p>こんなコードでCSSを生成しています。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> putCss css

<span class="ot">fontColor ::</span> <span class="dt">Color</span>
fontColor <span class="fu">=</span> <span class="st">&quot;#303030&quot;</span>

<span class="ot">css ::</span> <span class="dt">Css</span>
css <span class="fu">=</span> <span class="kw">do</span>
  html <span class="fu">?</span> fontSize (pct <span class="fl">62.5</span>)
  p <span class="fu">?</span> <span class="kw">do</span>
    marginTop nil
    marginBottom (rem <span class="fl">3.0</span>)
  a <span class="fu">?</span> <span class="kw">do</span>
    textDecoration none
  a <span class="fu">#</span> hover <span class="fu">?</span> color secondColor</code></pre></div>
<p>公式サイトです、チュートリアルやサンプルコードもここにあります。</p>
<p><a href="http://fvisser.nl/clay/" class="uri">http://fvisser.nl/clay/</a></p>
<h2 id="コーディング">コーディング</h2>
<p>私は<a href="https://github.com/jaspervdj/jaspervdj">作者の公開されているソースコード</a>や、<a href="http://tanakh.jp/posts/2011-11-05-haskell-infra.html">tanakhさんのブログ</a>,それと<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part1.html">Imokuri氏のブログ</a>を参考にさせていただきました。もちろん<a href="https://hackage.haskell.org/package/hakyll-4.8.3.2">HakyllのHackage</a>もです、ありがとうございます。</p>
<p>とりあえずImokuri氏のブログを読んでなんとなく摑んでから、作者のプログラムでも読めばいいんじゃないかと思います。</p>
<p>またブログを始める際、Markdownは知ってるよ、という人でも<a href="http://sky-y.github.io/site-pandoc-jp/users-guide/">Pandocのユーザーズガイド</a>は読んでおいたほうが良いと思います。Pandocならではの拡張が非常に便利なので、これを使わない手は無いです。</p>
<h2 id="シンタックスハイライト">シンタックスハイライト</h2>
<p>ブログのソースコードにもシンタックスハイライトが必要です。以前nanoでプログラムのデバッグをしたとき大変でした。</p>
<p>始めはhighlight.jsでも使おうかなあなんて思っていたんですが、Pandocはシンタックスハイライトをしてくれるそうなので、染色の為に専用のCSSを準備しましょう。<a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part4.html">Imokuriさんのこのページ</a>に詳しく載っています。もしくは<a href="https://github.com/eliza0x/eliza0x.github.io">私の書いたソースコード</a>でも読むと良いでしょう。</p>
<p>こんなコードです、動くかは知りません。</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span>
  create [<span class="st">&quot;css/highlight.css&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
    route   idRoute
    compile <span class="fu">$</span> makeItem (compressCss <span class="fu">$</span> styleToCss tango)</code></pre></div>
<p>追記: 2017/3/24</p>
<p>現在は上記のプログラムで生成したものではなく、自分で好きなカラースキームをベースにしたものをPandoc用に移植して使用しています。</p>
<p><a href="https://github.com/morhetz/gruvbox">morhetz/grubvox - https://github.com/morhetz/gruvbox</a></p>
<h2 id="コメントフォーム">コメントフォーム</h2>
<p>私の記事について質問があった時などに、メールを送ったりするのはハードルが高いかなと思ったので、コメンドフォームをDISQUSで設けました。はじめは自分で作る気でいたのですが、 <del>面倒だった</del> スパムコメントなどが怖かったのでアウトソーシングしました。デザインも可愛く気に入っています。</p>
<p>公式サイトの指示どおりにすると動かなかったので、<a href="tanakh.jp">tanakh氏のブログ</a>のソースコードを参考にさせて頂きました。</p>
<p><a href="https://disqus.com/">DISQUS</a></p>
<h2 id="終わりに">終わりに</h2>
<p>設定がMonoidのインスタンスになっていて <code>&lt;&gt;</code> で追加の設定を追加できるのが凄く便利でした。 Hakyll自体を実際に弄ってみて、型クラスについての知識が深まりました。</p>
<p>もうすこしCSSを書かないとまだまだ粗が目立ちますね。ブログを作るのも結構大変だ… Clayを使ってみてなかなか良いなぁと思ったので、HTMLもそういったもので書き出すかもしれないです。</p>
<p>あとClay等プリプロセッサをオンデマンドでコンパイルしてHakyllから便利に扱えるようにするラッパーを書きたいですね。hintとか使えばうまくいくのかな…？</p>
<p>最後に、このサイトはGihub Pagesにて公開してあります。Github PagesはGitの使い方を知らないと利用するのは難しいかもしれないですが非常に便利です、いかがですか?</p>
<p>このブログのソースコードは<a href="https://github.com/eliza0x/eliza0x.github.io/tree/bd964b8f01908b93c555d528bd020cb2060975bd">ここ</a>に公開しています。</p>
<p>追記: 2017/3/24</p>
<p><a href="https://github.com/eliza0x/eliza0x.github.io/tree/7377ae11adbbaabb2dcd4713e96cfa0183663627">最新版</a>はこちらです。</p>
<h4 id="github-pagesについて">Github pagesについて</h4>
<p>Github Pagesで独自ドメインを利用するために参考にしたものです。</p>
<ul>
<li><a href="http://qiita.com/mikakane/items/87c8f676815da4e5ac04">Github Pagesの使い方</a></li>
<li><a href="http://qiita.com/tiwu_official/items/d7fb6c493ed5eb9ee4fc">GitHub Pagesで静的なサイトを公開し、独自ドメインを設定する</a></li>
<li><a href="http://qiita.com/superbrothers/items/95e5723e9bd320094537">カスタムドメインの GitHub Pages で HTTPS を使う</a></li>
</ul>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://www.staticgen.com/">StaticGen</a> というサイトにまとまっています。静的サイトジェネレータのうちで有名なものといえばPelican(Python), Jekyll(Ruby), GitBook(JavaScript), Hugo(Go)などがあるでしょうか。おもしろそうなものでは、Lispで書かれたColeslawなんてものもあるそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>テンプレートの呼び出しのあたり<a href="#fnref2">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Fri, 24 Mar 2017 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/create_blog_with_hakyll.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>音楽の文法</title>
    <link>https://eliza.link/posts/GrammarOfMusic.html</link>
    <description><![CDATA[<a href="/posts/GrammarOfMusic.html"><h1>音楽の文法</h1>
</a>
<ul class="article_data"><li>  Posted on November  7, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<section class="article_text"><p>部室に着く頃にはみんな荷物をもって待合室にむかっている頃で、誰も居なかった。</p>
<!--more-->
<p>少し家を出るのが遅かったかな、と急いで支度をしていると部長が部屋に入ってくる。気をつかってわたしが遅刻しかかっている事をとがめない。</p>
<p>私には部活動を続ける理由がわからなかった。なぜ朝早く起きて、夜遅くまで練習をするのか。後輩に聞かれでもしたらどうしようと思っていた。やる気がないわけではなかったが、全力を出しきれてい気がしてしかたがないのはきっとこのせいだった。</p>
<p>急いで準備をする。サックスのネックをケースからとりだすと、ボディとの継ぎ目にグリースを塗る。次にコルクにグリースをたっぷり塗るとマウスピースをねじ込む。そしてネックをボディーに差し込んだあとストラップを取り付け首にさげる。最後にリガチャーのネジを締め、あらかじめ差し込んでおいたリードを固定する。</p>
<p>今日は楽器が冷たい。</p>
<p>楽器を首からぶら下げ、チューナーと楽譜を持つと何か忘れものはないか部室を見渡す。そうだ、今日は鞄も控室まで持っていかなくちゃな、とユニフォームと演奏会本番用の靴を鞄にほうりこみ、肩にさげる。</p>
<p>膝から嫌な感触がする。バスケットボールの授業で足をかけられてから調子が悪い。しかたないのでもう一方の足に力をいれる。部室の鍵をしめている部長の背中を意識しながら、自然に歩けているかな、と気にかける。</p>
<p>控室に入ると部員が数人居る。</p>
<p>「おはようございます」 「おはよう」</p>
<p>ブリネル硬さ試験機の横に鞄を置くと、後輩が話しかけてくる。</p>
<p>「今日は本番っすね」</p>
<p>今日は卒業生や地域の人が集まる一大コンサートだ。きっと親や知人もくる。このコンサートに出られるのは私にとって最後の機会だ。</p>
<p>顧問の指示で椅子を会場に出す。バケツリレーらしいが明らかに人がたりない。夜露にぬれてしまわないように部屋に運び込んでいた椅子を会場に引き出していく。椅子は持ちにくいけれど重さなんて大した事はない。こういう場合疲労の蓄積はどうなるんだろう。重く感じる場合はそれ相応の力が働いているんだろうか。</p>
<p>椅子が続々と並べられていく。脳が記憶上の資料をシークする。多分椅子は18×14で並んでいるはずだ。整列した椅子がパターンをもった模様に見える。</p>
<p>顧問がそろそろウォームアップをしようかと言うので私は楽器を抱えて部室に向う。楽器に息を通す。高音がかすれる。低温が揺れる。音程も出ない。最低音を鳴らし続けるが音に響きが感じられない。調子が悪い。</p>
<p>雲行きは怪しくなるばかりだ。</p>
<p>「合奏するぞ」</p>
<p>顧問に呼びかけられて会場に向う。ジャズバンドなら本番前の合奏はゲネプロだろうか、リハーサルだろうか。</p>
<p>ヒュウ、と風が吹く。風にのった雨がいくつか楽譜に丸いシミをつくる。しかたないので合奏を中止して昼食をとるようにと指示が入る。</p>
<p>雨が吹いているのにもかかわらず、卒業生の有志によるバンドは練習をはじめる。私は座席の最後尾で先輩方の演奏を聴く。私たちよりも少人数なのに力強いのはどうしてだろう。わかりきった事を考える。きっと今回もわからない。</p>
<p>「みんな大人ですね。」</p>
<p>隣の椅子に腰掛けた後輩が話しかけてくる。去年卒業した先輩がすごく大人に見える。在学中もそうだったんだろうか、それともスーツを着ているからだろうか。『社会に出たから』なんて答えは求めていない。先輩のイヤリングが目に入る、何かに引っかかって耳が裂けたりしないんだろうか。</p>
<p>鞄から珈琲を取り出す。苦いし複雑な味のこんなものをどうして私は好き好んで飲んでいるんだろうか。人間は味蕾という器官で味を感じていて、それが感じられる味はそれぞれ5種類しか無いといわれている。珈琲も分解すれば単純な味の集まりなんだろう。私は死ぬまでそれが本当かきっと知らない。私も音楽も単純な何かで構成されているんだろう。単純だからといって簡単じゃないなぁ、と苦笑する。</p>
<p>音楽に文法はあるんだろうか。顧問がたまに口にする楽典の存在を思い出す。</p>
<p>「控室に入ってくれ」</p>
<p>顧問の奥さんが部員のために準備してくれたエナジードリンクを飲む。気持が高揚する。これはカフェインによるものだろうか。瓶の成分表示を見る。</p>
<p>「やっぱり見ますよね」</p>
<p>以前メトロノームの説明書を読んでいた時も同じ事を言われた気がする。無水カフェイン含有量は50mgだった。</p>
<p>「今回の演奏会、成功させましょう!」</p>
<p>形にならない、言葉にもならない気持ちは存在するのだろうか、それとも言葉にしたくないだけだろうか。</p>
<p>自分の座席につくと、去年と違って空席が目立つ。寒いからだろうか。だからといって私のする事は変わらない。突然、さっと日が射す。注意を払って、しかし、思い切って演奏をする。最後はリードミスが多発したが、これが私の精一杯だ。</p>
<p>「今回は中成功だな」</p>
<p>打ち上げ会は楽しい、顧問はいつも笑いながら花束よりもお菓子の差し入れの方が多いことをネタにする。今年はシュークリームの差し入れが多かった。私も大小計4つほど食べただろうか。すこし甘すぎるなぁ、と後輩と笑った。2Lペットボトルジュースの一気飲み対決が始まる。とつぜん顧問に呼ばれる。</p>
<p>「今日のソロはなかなかやったぞ、三年間のが報われたな」</p>
<p>顧問の手は大きくて、力強かった。</p></section>
]]></description>
    <pubDate>Mon, 07 Nov 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/GrammarOfMusic.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Lilypondで楽譜を書いた</title>
    <link>https://eliza.link/posts/IntroductoryLilypond.html</link>
    <description><![CDATA[<a href="/posts/IntroductoryLilypond.html"><h1>Lilypondで楽譜を書いた</h1>
</a>
<ul class="article_data"><li>  Posted on September 19, 2016</li>

<li> Tags: <a href="/tags/music.html">music</a></li>
</ul>
<section class="article_text"><p>吹奏楽部でソロをもらったのですが、本来はピアノがソロを担当する曲なのでサックスの譜面がなく、しかたなく書くことになりました。</p>
<blockquote>
<p>LilyPond は、可能な限り高品位な楽譜を生み出すことを目的とする、オープン ソースの楽譜作成プログラムです。このフリー ソフトウェアは、伝統的な彫版の楽譜の美しさをコンピュータ プリントアウトで実現します。LilyPond はフリーソフトウェアであり、GNU プロジェクト の一部です。 - <a href="http://lilypond.org/index.ja.html" class="uri">http://lilypond.org/index.ja.html</a></p>
</blockquote>
<!--more-->
<p>GNUらしく公式サイトでは自由が強調されています。GNUのサイトはデザインこそカッコイイとはいい難いものの、どれも目にやさしく見やすいので私は好きです。</p>
<p>「高品位な」と言っているだけあって、無調整でもなかなか美しい楽譜を作ることが出来ました。 LilypondはTeX同様、テキストからpdfを出力します、なのでバージョン管理もできますし、好きなエディターで編集することもできます、そしてMusiXTeXと比べ非常に簡単に扱う事ができます。</p>
<p>弱点といいますか、WYSIWYGではないので間違いを見つけたときに書き直す箇所をみつけるのが大変でした、それ以外はまったく問題ありませんでした。</p>
<h2 id="環境を整える">環境を整える</h2>
<p>わたしはVimで楽譜を書きたかったので、Vimに<a href="https://github.com/matze/vim-lilypond">matze/vim-lilypond</a>を追加しました。 PlugやNeoBundle、今ならdein等のVimのプラグインマネージャを使えば簡単に導入できるでしょう。 話はそれますが、わたしは<a href="https://github.com/itchyny/miv">miv</a>というHaskellで書かれたプラグインマネージャを使用しています。オススメです。</p>
<h2 id="楽譜を書く">楽譜を書く</h2>
<p>Lilypondは容易に使用できるにかかわらず非常に強力です、以下に<a href="http://lilypond.org/examples.ja.html" class="uri">http://lilypond.org/examples.ja.html</a>からの例を載せておきます。</p>
<div class="figure">
<img src="../images/LilypondExam2.png" />

</div>
<p><a href="http://lilypond.org/doc/v2.18/Documentation/learning/index.ja.html">公式サイトのリファレンス</a>が充実しているので、それを読めば楽譜はひととおり書けるでしょう。</p>
<p><a href="http://lilypond.org/doc/v2.18/Documentation/notation/cheat-sheet">チートシート</a>も用意されています。</p>
<p>この説明だけでは味気ないので、すこしだけサンプルコードを載せておきます。</p>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>
<span class="kw">{</span>
  c&#39; e&#39; g&#39; e&#39;
<span class="kw">}</span></code></pre></div>
<p>以上のコードで</p>
<div class="figure">
<img src="../images/LilypondExam3.png" />

</div>
<p>のような譜面ができます。ひとつずつ解説しましょう。</p>
<ul>
<li>楽譜の目には見えない部分の設定は、<code>\hoge</code>でおこないます。<code>\version</code>はLilypondのバージョンを指定しています。</li>
<li>楽譜本体は<code>{</code>と<code>}</code>で囲みます。</li>
<li>音の指定はコードで指定します。<code>a</code>から<code>g</code>までで<code>h</code>は存在しません。小文字です。</li>
<li>コードの後の<code>'</code>は1オクターブ上の音、という意味です。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;</span> <span class="kw">{</span>
  c&#39; c&#39; c&#39; c&#39; <span class="dv">|</span> c&#39; c&#39; c&#39; c&#39; <span class="dv">|</span> c, c, c, c, <span class="dv">|</span> c, c, c, c,
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam5.png" />

</div>
<ul>
<li><code>\relative</code>で相対的に記述を行うことができます。</li>
<li><code>|</code>で小節を明示的に区切ることができます。自動でも区切られますが、あえて示す事によって一小節に音が足りない場合を検知してくれるのでミスが減ります。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;</span> <span class="kw">{</span>
  <span class="fu">\key f</span> <span class="fu">\major</span>
  c&#39; r<span class="dt">2</span> d,<span class="dt">4</span> <span class="dv">|</span> r<span class="dt">4.</span> d<span class="dt">8</span> c<span class="dt">4</span> a
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam4.png" />

</div>
<ul>
<li>音の後の数字で長さを指定します。</li>
<li><code>\key</code>で調を指定しています。</li>
<li><code>r</code>で休符です。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;&#39;</span> <span class="kw">{</span>
  a b c d <span class="dv">|</span> <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt; <span class="dt">&lt;</span>a b&gt;<span class="ch">(</span> <span class="dv">|</span> <span class="dt">&lt;</span>a b c d e&gt;<span class="dt">1</span><span class="ch">)~</span> <span class="dv">|</span> <span class="dt">&lt;</span>a b c d e&gt;<span class="dt">1</span>
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam6.png" />

</div>
<ul>
<li><code>&lt;</code>と<code>&gt;</code>で囲んだ範囲が和音になります。</li>
<li><code>(</code>と<code>)</code>で囲んだ範囲がスラーになります。</li>
<li><code>~</code>を付けると後の音とのタイになります。</li>
</ul>
<div class="sourceCode"><pre class="sourceCode lilypond"><code class="sourceCode lilypond"><span class="kw">\version</span> &quot;<span class="st">2.18.2&quot;</span>

<span class="fu">\relative c&#39;&#39;</span> <span class="kw">{</span>
    c<span class="dt">4</span>-<span class="st">^\p</span> c-<span class="st">+\pp</span> c-<span class="st">-\f</span> c-!<span class="st">\ff</span> <span class="dv">|</span> c<span class="dt">4</span>-<span class="st">&gt;</span> c-<span class="st">.</span> c<span class="dt">2</span>-<span class="st">_</span>
  <span class="dv">|</span> a<span class="st">\&lt;</span> b<span class="st">\!</span> c d<span class="st">\&gt;</span> <span class="dv">|</span> e<span class="dt">1</span>
<span class="kw">}</span></code></pre></div>
<div class="figure">
<img src="../images/LilypondExam7.png" />

</div>
<ul>
<li>各アーテュキレーションも付ける事ができます。</li>
<li><code>\!</code>でクレセンド、デクレセンドの終端になります。</li>
</ul>
<!-- 誤りを発見
最後に、わたしの実際に書いたコードの断片を紹介します。

```lilypond
\version "2.18.2" 

\header { 
 title = \markup \center-align { "Autumn Leaves" } 
 subtitle = \markup \center-align { "Solo Score" } 
} 
\paper { 
	#( set-paper-size "a4" ) 
} 
\transpose c' bes' {
  \relative c' {
    \key f \major
    \time 4/4
      r2 d8^"Solo" c bes a( | a4.) d8 c bes a c | bes a r g r f r a( | a) bes c a( a4.) f8 
    | <f a> <f a> r4 r2 | r8 e g[ bes] d[ c bes a] | bes cis,4. r8 cis e[ d]( | d4) r d8 f a e'
  }
}
```

![](../images/LilypondExam8.png)

- `\time 4/4`で四分の四拍子であることを明示。^[この例の場合はしなくても良い]
- `-es`、`-is`でシャープ、フラット
- Cの調の楽譜をBes調の楽譜に起こしたかったので、Cそのままで一度書いたあとに、`\relative c bes`でBesに変換した。
-->
<p>以上です、簡単だったでしょう？さあ、LilyPondをインストールして音楽家になりましょう。</p></section>
]]></description>
    <pubDate>Mon, 19 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/IntroductoryLilypond.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>型システム入門(TaPL)読書メモ</title>
    <link>https://eliza.link/posts/TaPL.html</link>
    <description><![CDATA[<a href="/posts/TaPL.html"><h1>型システム入門(TaPL)読書メモ</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLでの読書メモが書いてあります随時追記していきます。 間違いを発見した場合はコメントか、me [at] eliza [dot] linkまでメールを下さると喜びます。</p>
<p><a href="http://tapl.proofcafe.org/home">日本語のサポートページ</a>が準備されています。 また、<a href="https://estore.ohmsha.co.jp/titles/978427406911P">出版元のページ</a>から第一章が無料で読めます。</p>
<p>通読したのちにまた記事を書こうと思っています。</p>
<!--more-->
<h2 id="予備知識について">予備知識について</h2>
<p><a href="/posts/PreTaPL.html">このページに書いてあります</a></p>
<h2 id="tapl">TaPL</h2>
<blockquote>
<p>型システムとは、プログラミング言語の安全性や効率を高めるうえで重要な理論・手法です。本書は、その型システムについて基礎的な話題を網羅し、実装例を交えて丁寧に解説したThe MIT Press発行の解説書“Types And Programming Languages”（TAPL）を翻訳したものです。言語設計者や学生だけでなく、静的型付言語を深く理解して活用したいプログラマーにとっても貴重な情報となっています。 <a href="http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948" class="uri">http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001948</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
サポートサイトができたらジュンク堂トークのPDFも載ると思いますが、これだけは先に：型システム入門(TAPL)はとりあえず1,3,8,5,9,11章（＆2章の必要な部分）と、あとは好きな章を読めば「読んだ」ことにしても良いと思います！（60%本気）
</p>
— Eijiro Sumii (<span class="citation">@esumii</span>) <a href="https://twitter.com/esumii/status/315135694462939137">2013年3月22日</a>
</blockquote>
<p>以降読書メモです</p>
<h4 id="第1章-はじめに">第1章 はじめに</h4>
<p>型を導入する意義や、型システムの実用例が書かれています。</p>
<h4 id="第2章-数学的準備">第2章 数学的準備</h4>
<p>_- 数学の公式や前提として必要な知識が列挙されています、ここで馴染の無い物があれば読むのを中断し、いちどその分野の知識を補うべきだとしていますが私は強行を決めました。 - 2017/05/07 勉強しました</p>
<h2 id="第1部-型無しの計算体系">第1部 型無しの計算体系</h2>
<h4 id="第3章-型無し算術式">第3章 型無し算術式</h4>
<ul>
<li>正規形
<ul>
<li>もう項が評価できない、という意味である。 <code>if t1 then t2 else t3</code> は評価できるが、 <code>true</code> はもう評価できない。</li>
<li>項が正規形であるにかかわらず値ではない場合を『行き詰まり状態』と言う。</li>
<li>すべての項に対して、ある正規形が存在する</li>
</ul></li>
<li>多ステップ評価
<ul>
<li>1ステップ評価を合成したやつだと理解しておいた。</li>
</ul></li>
</ul>
<h4 id="第4章-算術式のml実装">第4章 算術式のML実装</h4>
<ul>
<li>Arithで満たしている機能と色々が含まれている言語を作りました。</li>
<li>Mikan - <a href="https://github.com/eliza0x/Mikan/tree/e62f16b277af3118dacdd8c7c3ea0655c2766713" class="uri">https://github.com/eliza0x/Mikan/tree/e62f16b277af3118dacdd8c7c3ea0655c2766713</a></li>
</ul>
<h4 id="第5章-型無しラムダ計算">第5章 型無しラムダ計算</h4>
<ul>
<li>なんとなく分かったら、<a href="http://tarao.hatenablog.com/entry/20100208/1265605429">ラムダ計算基礎文法最速マスター</a>にあっさりと書かれているので読むといいかも。</li>
<li><span class="math inline">\(\lambda\)</span>(Lambda)計算
<ul>
<li>全ての計算が関数定義と関数適用で表される(trueやfalse、数も関数!)</li>
<li>複雑なプログラミング言語のエッセンスは小さな核となる計算の集まりとして定式化できる、という事で生まれた。</li>
</ul></li>
<li>Lambda計算はプログラミング言語であると共に証明可能な数学的対象。</li>
<li>Lambda計算に似たようなものに<span class="math inline">\(\pi\)</span>計算やオブジェクト計算がある(本書では扱わないらしいが)
<ul>
<li><a href="http://web.yl.is.s.u-tokyo.ac.jp/kobalab/kadai99/picalc.html">π-calculus 超入門</a></li>
<li>もしかしてアクターモデルの原点？</li>
</ul></li>
<li>自由変数の無い項を「閉じている」もしくは「コンビネータ」という。
<ul>
<li><span class="math inline">\(\lambda x.\; x\)</span> 例えばこの恒等関数はコンビネータである。</li>
<li><span class="math inline">\(\lambda x.\; y\)</span> この項はコンビネータではない。</li>
</ul></li>
<li><span class="math inline">\((\lambda x.\; x) y\)</span> は <span class="math inline">\(y\)</span> と評価される。</li>
<li>ラムダ計算の評価戦略は数種類あり、プログラミング言語によっても違う。
<ul>
<li>Haskellは名前呼び戦略の変種である必要呼び戦略</li>
<li>大多数の言語では値呼び戦略</li>
</ul></li>
<li>値呼び評価は「正格」名前呼び戦略は「非正格」もしくは「遅延評価」と呼ばれる。</li>
<li>純粋なラムダ計算でもブール値や数の表現と評価は出来る
<ul>
<li>純粋なラムダ計算ではTrueとFalseを以下のように表現する。</li>
<li><span class="math inline">\(true\; =\; \lambda t.\; \lambda f.\; t;\\false\; =\; \lambda t.\; \lambda f.\; f;\)</span></li>
<li>面倒、なので必要に応じて拡張して使ったりする。</li>
</ul></li>
<li>正規形に評価できない項が存在する。
<ul>
<li><span class="math inline">\(omega\; =\; (\lambda x. x\; x)\; (\lambda x. x\; x);\)</span></li>
<li>簡約基を一つだけ持っているが、簡約すると<span class="math inline">\(omega\)</span>そのものになるためである。</li>
<li>これを発散という。</li>
</ul></li>
<li><span class="math inline">\(omega\)</span>コンビネータには不動点コンビネータと呼ばれる一般化がある。
<ul>
<li>Haskellが分かるならtanakh氏の<a href="http://d.hatena.ne.jp/tanakh/20040813">不動点演算子</a>の記事が面白いかも。</li>
</ul></li>
</ul>
<h4 id="第6章-項の名無し表現">第6章 項の名無し表現</h4>
<ul>
<li><a href="http://ryna4c2e.hatenablog.com/entry/20141023/1414077068">de Bruijn indexについての備忘録</a>が参考になると思います。</li>
<li>代入等を可能にするため、変数に適宜新しい名前を与えたい。</li>
<li>そのためには様々な方法があります。
<ul>
<li>本著では「de Bruijinインデックス」<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>を使用しています。</li>
</ul></li>
<li>de Bruijinインデックス
<ul>
<li>変数を名前から解放したい。</li>
<li>束縛しているLambdaからどれだけ遠い(深い)かを自然数で表します。</li>
<li>例
<ul>
<li><span class="math inline">\(\lambda x.\; x \Rightarrow \lambda .\; 0\)</span></li>
<li><span class="math inline">\(\lambda x.\lambda y.\; y\; x \Rightarrow \lambda.\lambda. \; 0\; 1\)</span></li>
<li><span class="math inline">\(foo = (\lambda x. (\lambda x. x)) (\lambda x. x); \Rightarrow foo = (\lambda .\lambda . 0) (\lambda . 0);\)</span></li>
<li><span class="math inline">\(\lambda\)</span> の数より多い数値の場合、自由変数を指す。例えば <span class="math inline">\(\lambda .1\; 0\)</span> の <span class="math inline">\(1\)</span> は自由変数</li>
</ul></li>
<li>名無し項より自由変数を含むかどうか判別が簡単。</li>
</ul></li>
<li>シフト
<ul>
<li>de Bruijinインデックスを導入すると、代入の際自由変数のみインデックスを変更する必要が出てくる。</li>
</ul></li>
</ul>
<p>自由変数にインデックスを割り当てます。 <span class="math display">\[
\gamma =    foo \mapsto 2 \\
\qquad      bar \mapsto 1 \\
\qquad\quad z   \mapsto 0
\]</span></p>
<p>Lambda式です。 <span class="math display">\[
foo = \lambda x. \lambda y. z \\
bar = \lambda x. foo\; x
\]</span></p>
<p>変数をde Bruijinインデックスで表現します。 <span class="math display">\[
foo = \lambda . \lambda . 2 \\
bar = \lambda . 3\; 0
\]</span></p>
<p><code>foo</code>をインライン化します。 <code>bar</code>のLambdaの一つ内側に入る訳ですから、1個シフトする必要があります。<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<p><span class="math display">\[
bar = \lambda . (\lambda . \lambda . 3)\; 0
\]</span></p>
<p><span class="math inline">\(\beta\)</span>簡約をしましょう。Lambdaが一つ減るたびに、インデックスを一小さくする必要があります。</p>
<p><span class="math display">\[
bar = \lambda . \lambda . 2
\]</span></p>
<!-- #### 第7章	ラムダ計算のML実装 -->
<h2 id="第2部-単純型">第2部 単純型</h2>
<h4 id="第8章-型付き算術式">第8章 型付き算術式</h4>
<ul>
<li>進行定理
<ul>
<li>正しく型付けされた項は行き詰まり状態に陥らない。</li>
</ul></li>
<li>保存定理
<ul>
<li>正しく型付けされた項が評価できるならば、評価後の項も正しく型付けされている。</li>
</ul></li>
<li>以上二つの定理を満たしたものを型安全<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>である、と言われる。</li>
</ul>
<!--
  #### 第9章	単純型付きラムダ計算
  
  - Lambda抽象を型として扱う$\rightarrow$型
  	+ これだと$(\lambda x. 0) true$のような時に型がつけられない
  	+ これでは書きたいプログラムに型が割り当てられないことが多々ある
  
  ```haskell
  foo = if <長く複雑な式>
  	then true
  	else print "ERROR"
  ```
  
  このHaskellのプログラムでは型エラーでコンパイルが通らない。
  
  > ラムダ計算はチューリング完全なので正格な型解析は不可能である
  > -- P. 75 9.1章
  
  - ちょっとよく分からない
    ~ $omega$等発散してしまう場合に無限を扱えないため？
  
  - 型付きラムダ計算は$\lambda _\rightarrow$と表記される_
  - 導入規則: その型の要素がどのように作られるか
  - 除去規則: その型の要素がどのように使われるか
  - 論理学と型理論のふしぎな関連はCurry-Howard対応^[Curry-Howard同型ともよばれる]として知られている
  	+ [Haskell/カリー=ハワード同型](https://ja.wikibooks.org/wiki/Haskell/%E3%82%AB%E3%83%AA%E3%83%BC%3D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B)が面白い
  - 型注釈は評価においてはなんの役割も果たさない
  - たいていのプログラムは実行時に型無しの項にもどされる
    + [型安全なリストを作るのです(｀・ω・´) ～ その1、Phantom Type（幽霊型）入門ですー＞ω＜](https://kagamilove0707.github.io/programming/2014/02/20/about-phantom-type/)が面白い
-->
<!--
  #### 第10章	単純型のML実装
  #### 第11章	単純な拡張
  #### 第12章	正規化
  #### 第13章	参照
  #### 第14章	例外
  
  ## 第3部	部分型付け
  #### 第15章	部分型付け
  #### 第16章	部分型付けのメタ理論
  #### 第17章	部分型付けのML実装
  #### 第18章	事例：命令的オブジェクト
  #### 第19章	事例：Featherweight Java
  
  ## 第4部	再帰型
  #### 第20章	再帰型
  #### 第21章	再帰型のメタ理論
  
  ## 第5部	多相性
  #### 第22章	型再構築
  #### 第23章	全称型
  #### 第24章	存在型
  #### 第25章	System F のML実装
  #### 第26章	有界量化
  #### 第27章	事例：命令的オブジェクト再考
  #### 第28章	有界量化のメタ理論
  
  ## 第6部	高階の型システム
  #### 第29章	型演算子とカインド
  #### 第30章	高階多相
  #### 第31章	高階部分型付け
  #### 第32章	事例：純粋関数的オブジェクト
  
  ## 付録A	演習の解答
  ## 付録B	記法
-->
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>「de Brujin項」とも呼ばれるそうです。日本語ではド ブラウンと読むのが一番近いそうです。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>数式に起こすと <span class="math inline">\(\uparrow ^2 (\lambda . \lambda . 2)\)</span><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>健全性とも言われる<a href="#fnref3">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/TaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>TaPLに必要な知識の学習記録</title>
    <link>https://eliza.link/posts/PreTaPL.html</link>
    <description><![CDATA[<a href="/posts/PreTaPL.html"><h1>TaPLに必要な知識の学習記録</h1>
</a>
<ul class="article_data"><li>  Posted on September 15, 2016</li>

<li> Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/book.html">book</a>, <a href="/tags/memo.html">memo</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/math.html">math</a></li>
</ul>
<section class="article_text"><p>TaPLを読むのために少し勉強したのでメモを残しておきます。 必要に応じて追記していきます。</p>
<p><a href="http://zoetrope.hatenablog.jp/entry/2013/07/24/204613">数学初心者のための「型システム入門」入門</a>によると前提として以下の知識が必要になるようです。</p>
<blockquote>
<ul>
<li>数学(離散数学、アルゴリズム、論理学)</li>
<li>高階関数型プログラミング言語(Scheme、ML、Haskellなど)</li>
<li>コンパイラの基礎的な概念(抽象構文、BNF文法、評価、抽象機械など)</li>
</ul>
</blockquote>
<p>TaPLの読書記録は<a href="/posts/TaPL.html">このページ</a>に載っています。</p>
<p>2017/05/07 数学をきちんとやって行くことを決めて半年以上立ちます。</p>
<!--more-->
<h2 id="論理学">論理学</h2>
<ul>
<li><a href="http://abelard.flet.keio.ac.jp/person/mitsu/pdf/nyumon_logic.pdf">「論理学入門」講義ノート</a>が論理学で検索してヒットしたものの中で一番容易に読み進めることができそうだったので読み流した(証明は追いかけるの面倒だったので飛ばした)。</li>
<li>記号がダメな人はアレルギーをおこしそうな分野でした、印刷したテキストをうっかり直視した友人は帰らぬ人となりました。(まあプログラマは大丈夫だと思う)</li>
<li>後日みつけた資料ですが、こちらのほうが易しく書かれています。 <a href="http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf" class="uri">http://abelard.flet.keio.ac.jp/person/takemura/class/2013/3-print-nk.pdf</a></li>
<li>2017/05/07 数学に興味をもったため、野矢茂樹氏の書いた<a href="http://www.utp.or.jp/bd/978-4-13-012053-1.html">論理学</a>を読みました。</li>
</ul>
<h2 id="集合論">集合論</h2>
<ul>
<li>TaPLの冒頭に集合がなんだかんだと書かれていたので勉強が必要だと思い、<a href="http://www.math.twcu.ac.jp/~yamauchi/text/2012/alg2012/set_logic.pdf">東京女子大学の代数学IA(集合と論理)のテキスト</a>を読んでみました。
<ul>
<li>私の環境では途中で組版がすこし崩れています。
<ul>
<li>ChromenのPDFビューアのせいだったようです。</li>
</ul></li>
</ul></li>
<li>2017/05/07「集合・位相入門」の集合の項だけ読みました。 <a href="https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html" class="uri">https://www.iwanami.co.jp/.BOOKS/00/4/0054240.html</a></li>
<li>2017/05/07 <a href="http://www.asakura.co.jp/books/isbn/978-4-254-11478-2/">集合への30講</a>を読みました。</li>
</ul>
<h2 id="離散数学">離散数学</h2>
<ul>
<li>これもきちんとやります。</li>
</ul>
<h2 id="ラムダ計算">ラムダ計算</h2>
<ul>
<li><a href="http://language-and-engineering.hatenablog.jp/entry/20130313/LambdaCalculusBasicNoteLinks">「ラムダ計算」を独学で学習するための，講義ノートやPDFのリンク集 （復習用の問題付き）</a>に詳しくまとまっています。</li>
<li>これもきちんとやります。</li>
</ul>
<h2 id="アルゴリズム">アルゴリズム</h2>
<ul>
<li>ダメです。</li>
</ul></section>
]]></description>
    <pubDate>Thu, 15 Sep 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/PreTaPL.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>劣等感を感じる自分について</title>
    <link>https://eliza.link/posts/ZenMind.html</link>
    <description><![CDATA[<a href="/posts/ZenMind.html"><h1>劣等感を感じる自分について</h1>
</a>
<ul class="article_data"><li>  Posted on August 17, 2016</li>

<li> Tags: <a href="/tags/memo.html">memo</a></li>
</ul>
<section class="article_text"><p><a href="http://kosen14s.github.io/">Kosen14s</a>の人達は知っていると思うけれど、私は驚くほど英語が出来ない。中学時代にまったく勉強をしなかったので、それ以前から学んでいた数学や国語はまあまあ出来るけど、中学から習い始めた英語は壊滅的だ。</p>
<!--more-->
<p>そのおかげで、こう言っては同学の人達に失礼だけれど賢くない高校に入学せざるをえなかった。しかも工業高校だ。 おかげで私の脳味噌はすっからかんだ。授業の半分が先生の中身の無い雑談でなくなるような授業を三年うけていたからね。</p>
<p>白状しよう、私は勉強ができない事に非常に劣等感をもっている。</p>
<p>私はプログラミングが好きだ。楽しいから？怪しい。</p>
<p>プログラミングを始めた原因はなんとなくカッコよかったからだ。プログラミングをはじめた頃は作業の大半の時間をWikipediaで潰していた気がする、ようするに好きじゃなかったんだ。 プログラミングを始めた理由なんて今となっては分からないけれど、カッコよくみえたのは、頭がよさそうにだったからかも知れない。天才ハッカーってね。</p>
<p>それでもダラダラとプログラミングは続けた。ただただ「同級生は出来ないけれど私にはプログラミングが出来る」という根拠の無い自信で劣等感におしつぶされそうな自分の心の平衡を保っていた。</p>
<p>今でこそ楽しんでプログラミングをしているけど、純粋に楽しんでいるかは分からない。 楽しいかどうかなんて心の問題だと思うので大した問題じゃないだろう、とも思う。</p>
<p>結局他人と比べるから劣等感を持ったり悩んだりするんだ。</p>
<p>そして劣等感に悩む自分が出した解決策が“Zen”だ。 たいしてネーミングに意味は無い、なんとなく禅っぽいものだからZenだ。<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>「謙虚になれ」「こんな下らないことに心を動かされるとは情けない」「何かに依存するな」</p>
<p>何でも自分と比較して物事を見るのを辞めた。素直になった。 ごめん、嘘言った。素直になろうと思う。</p>
<p>しまりの無い記事になってしまった。</p>
<p>さあ、Zen Mindを手に入れた次は努力して勉強だ。根本から悩む原因を解決するのだ。</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>そもそも禅とは何かを良くしらない<a href="#fnref1">↩</a></p></li>
</ol>
</div></section>
]]></description>
    <pubDate>Wed, 17 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/ZenMind.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Blink on AtTiny85</title>
    <link>https://eliza.link/posts/AtTiny85a.html</link>
    <description><![CDATA[<a href="/posts/AtTiny85a.html"><h1>Blink on AtTiny85</h1>
</a>
<ul class="article_data"><li>  Posted on August  8, 2016</li>

<li> Tags: <a href="/tags/programming.html">programming</a>, <a href="/tags/microprocessor.html">microprocessor</a>, <a href="/tags/arduino.html">arduino</a></li>
</ul>
<section class="article_text"><p><a href="https://twitter.com/mc475_46">もは氏/mc475_46</a>の勧めもあってついにAVRマイコンに手を出してみました。後悔するのは後になってからでも構わないでしょう。 自分の書いたプログラムがPCの外で動いているというのは新鮮ですし、マイコンはプログラミングと日常をつないでくれるような気がしてなんだかとても楽しいです。</p>
<p>PlatformIOでFT232RLを使ってAtTiny85(AVR)に書き込んでいる記事なネットでみつけられなくて苦労したのでこの記事を書きました。</p>
<!--more-->
<h2 id="tldr">TL;DR</h2>
<p><a href="#プログラムを書き込む">ここ</a>のプログラムを参照して</p>
<p>結線後に<code>./src/main.ino</code>と<code>./platformio.ini</code>にファイルを配置して<code>platformio run -t upload</code>すればOK。</p>
<h2 id="長い文章を読める人類向け">長い文章を読める人類向け</h2>
<p>回路図も作ってがんばって記事を書くつもりでしたが、Fritzing(可愛い回路図をつくれるソフト)のビルドが目の前でSegmentation faultを投げてから心が終わってしまったのでそれほど長い記事にはならない筈です。</p>
<p>さて、今回目指すのはAVR ーわたしが取り組んだのはAtTiny85ですが、おおよそ同じ手順でAVRのマイコン全般は動作する事でしょうー でBlink(Lチカ)をすることです。</p>
<p>ArduinoIDEなどGUIからでも出来るようですが、IDEはVimが使えないので面倒です。なので今回はPlatformIOというソフトウェアでコンパイルから書き込みまで行おうと思います。</p>
<h2 id="attiny85">AtTiny85?</h2>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">データシート</a></p>
<p>AVRはAtmel社が作っているRISCのマイコンです。AtTiny85はそのAVRのうちのTinyシリーズに属するもので、Tiny(ちっぽけ)の名にふさわしくピンは8本しかありません、さらにそのうちの2PINは電源に使用するので我々は6PINしか使う事が出来ません。しかしDIP版でもわずか1cm * 1cmのマイコンにはROMが8Kbyte,RAMが512Byteも搭載されています、必要十分ではないでしょうか。</p>
<div class="figure">
<img src="/images/AtTiny85.jpg" alt="画像は秋月電子様より" />
<p class="caption">画像は秋月電子様より</p>
</div>
<h2 id="platformio">PlatformIO？</h2>
<blockquote>
platformioがすごいのは、IDEが必要ないということだ。inoは別途IDEが必要だったがplatformioは必要ない。パッケージとして自動でダウンロードしてくれるのだ。さらにすごいのは様々な組み込みボードをサポートしている。 有名どころはばっちり抑えているようで、STM32 Nucleoなど最近のボードもサポートされている。<br />
<a href="http://qiita.com/caad1229/items/7b5fb47f034ae6e0baf2">Qiita - コマンドラインでArduino開発 : vim + platformio</a>
</blockquote>
<p>コマンド一つでそのマイコンに必要なソフトウェアをインストールしてくれたり、ライブラリのインストーラになったりする凄いソフトウェアです、上記のリンクの記事を読めばだいたいの使い方は分かると思います。</p>
<h2 id="ft232rl">FT232RL</h2>
<p>秋月電子さんが出しているUSB - Serial変換基盤です、FTDI社のFT232Rというチップを利用しているようです。特殊なモードでマイコンにプログラムを書き込みます。 専用の書き込み機を買うと結構値が張るのでありがたいですね。</p>
<h2 id="avrdude">Avrdude</h2>
<p><a href="http://www.nongnu.org/avrdude/">AVRDUDE is a utility to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in-system programming technique (ISP).</a></p>
<p>AVRマイコンにプログラムを書き込むのに、PlatformIOはバックエンドでこれを使用しているみたいです。</p>
<p>しかしAvrdudeもPlatformIOもインターネットに記事が少ない…苦労しました。</p>
<h2 id="プログラムを書き込む">プログラムを書き込む</h2>
<p>はじめにFT232Rのドライバをインストールしましょう、お好みのパッケージマネージャや<a href="http://www.ftdichip.com/Drivers/VCP.htm">FTDIのWebサイト</a>からダウンロードしてください。 普通にFT232Rを使用するだけならドライバは必要無いようなのですが、BitBangモードでFT232Rを使用するには専用のドライバが必要になるそうです。</p>
<p>BitBangモードについては、<a href="http://ore-kb.net/hard/BitBang/">この記事</a>にくわしく書かれていました。</p>
<p>つぎにPlatformIOをインストールしてください、これもパッケージマネージャや<a href="http://platformio.org/">公式サイト</a>からインストールできます。</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> AtTiny85  
$ <span class="bu">cd</span> AtTiny85/  
$ <span class="ex">platformio</span> init -b attiny85  </code></pre></div>
<p>さあ、AtTiny85に書き込む準備は整いました</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">void</span> setup(){
  pinMode(<span class="dv">1</span>, OUTPUT);
}

<span class="dt">void</span> loop(){
  digitalWrite(<span class="dv">1</span> , HIGH);
  delay(<span class="dv">1000</span>);
  digitalWrite(<span class="dv">1</span> , LOW); 
  delay(<span class="dv">1000</span>);
}</code></pre></div>
<p><code>main.ino</code></p>
<div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[env:attiny85]</span>
<span class="dt">platform </span><span class="ot">=</span><span class="st"> atmelavr</span>
<span class="dt">framework </span><span class="ot">=</span><span class="st"> arduino</span>
<span class="dt">board </span><span class="ot">=</span><span class="st"> attiny85</span>
<span class="dt">upload_protocol </span><span class="ot">=</span><span class="st"> diecimila</span>
<span class="dt">upload_flags </span><span class="ot">=</span><span class="st"> -v -F -e -p t85 -B9600</span>
<span class="dt">board_f_cpu </span><span class="ot">=</span><span class="st"> 1000000L</span>
<span class="co"># upload_port = /dev/ttyUSB0</span></code></pre></div>
<p><code>platformio.ini</code></p>
<p>あとは<code>main.ino</code>を自動生成されたsrcディレクトリ下、<code>platformio.ini</code>を置き換えて下さい。</p>
<p>工夫しているのはPlatformIOの<code>upload_protocol</code>と<code>upload_flags</code>ぐらいで、Avrdude用にすこしオプションを書いてあるだけです。 マイコンをAtTiny85以外を使いたいなら、<code>board</code>の中身を変更してください。</p>
<p>具体的にどう変更すれば良いかわからなければ、<code>platformio boards</code> で一覧が表示されます。</p>
<p>さあ、あとは結線をするだけです。</p>
<p><a href="http://www.atmel.com/Images/Atmel-2586-AVR-8-bit-Microcontroller-ATtiny25-ATtiny45-ATtiny85_Datasheet.pdf">Atmelのデータシート</a></p>
<p><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a#%E5%9B%9E%E8%B7%AF">結線はこのリンクを参考にしてください</a></p>
<p>さあ、出来ましたか？</p>
<div class="figure">
<img src="/images/Ft232rlToAttiny85.jpg" />

</div>
<p>それでは <code>$ platformio run -t upload</code> して下さい。</p>
<p>書き込めましたか？それではAtTiny85を差し替えてBlinkしてみましょう、AtTiny85のIOはこの通りになっています。</p>
<div class="figure">
<img src="/images/AttinyBlink.png" alt="画像はSparkFun様より" />
<p class="caption">画像はSparkFun様より</p>
</div>
<p>ArduinoでLEDを光らせていた時の1/10程度の大きさで同じことが実現できてしまいましたね、最高です。</p>
<div class="figure">
<img src="/images/Blink.jpg" alt="Blink" />
<p class="caption">Blink</p>
</div>
<p>なお、うまくいかない人はTwitterの@Eliza_0xか、me [at] eliza [dot] linkまでメールをくだされば、出来る限り手伝います。</p>
<h2 id="thanks">Thanks</h2>
<p>紹介できなかった私が参考にしたリンク達</p>
<ul>
<li><a href="http://qiita.com/erukiti/items/0a51d959082e242e2e2a">FT232RLでAVRライターを自作してATtiny85をDigispark互換にするまで</a></li>
<li><a href="http://make.kosakalab.com/make/electronic-work/arduino-ide-arduinoisp/">Arduino IDEでATtiny他の開発（Arduino-ISP編）</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/tiny-avr-programmer-hookup-guide/attiny85-use-hints">Tiny AVR Programmer Hookup Guide</a></li>
<li><a href="http://techlife.cookpad.com/entry/2015/10/28/080000">電子工作に必要な道具達</a></li>
<li><a href="http://qiita.com/erukiti/items/1a517c3e424835ca14f1">ステップアップ電子工作/レベル1前編 ブレッドボードで電子工作を始めよう (まずは準備編)</a></li>
<li><a href="http://startelc.com/AVR/Avr_100timrMemo.html">AVRのタイマー</a></li>
<li><a href="http://qiita.com/tadfmac/items/3a42a641531f2c3679a1">ArduinoユーザーのためのATTiny入門</a></li>
<li><a href="http://www.ernstc.dk/arduino/38khz_timer.htm">Using timers to generate 38KHZ - for IR</a></li>
<li><a href="https://www40.atwiki.jp/system-ed/pages/16.html">C言語　演算子</a></li>
<li><a href="http://tyk-systems.com/ATmega328/ATmega328.html">Arduinoから取り外したATmega328を外付け水晶振動子(発振子)で動作させる。</a></li>
<li><a href="http://www.wsnak.com/wsnakblog/?p=4110">arduino(AVR)でキャリア波38KHzを発生させる</a></li>
</ul>
<p>他多数、関係企業とプログラマ達に感謝</p></section>
]]></description>
    <pubDate>Mon, 08 Aug 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/AtTiny85a.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>「人はなぜ戦争をするのか」を読んだ</title>
    <link>https://eliza.link/posts/why_war_summary.html</link>
    <description><![CDATA[<a href="/posts/why_war_summary.html"><h1>「人はなぜ戦争をするのか」を読んだ</h1>
</a>
<ul class="article_data"><li>  Posted on July  1, 2016</li>

<li> Tags: <a href="/tags/book.html">book</a>, <a href="/tags/kosen14s.html">kosen14s</a></li>
</ul>
<section class="article_text"><p><em>この記事はkosen14’s読書会12日目の記事です。</em></p>
<p><a href="http://yamasy1549.hateblo.jp/entry/2016/06/29/102252">やましーの書いた記事</a>が著者の目に留まり、作者が喜んでいたりだとか、<a href="http://furutsuki.hatenablog.com/entry/2016/06/24/074640">ふるつきの書いた記事</a>がはてなブログ界隈で話題になったりだとかしていますね。</p>
<p>なるほど、やましーの記事は内容こそ所々分からないものの非常に興味をひきたてられて、ぜひ読んでみたいと思わせる記事でしたし、ふるつきの記事も気持ちよく読める文体で記されていて、話題になるのもわかるなあ…と私もプレッシャーに感じています。</p>
<p>今回私はフロイト著の「人はなぜ戦争をするのか」を読んで記事を書きました、光文社の古典新訳文庫、本当に読みやすくてありがたいです。</p>
<!--more-->
<p>さて、<a href="http://kosen14s.github.io/bookclub/">kosen14’s読書会8日目</a>のモリゾー君はニーチェの恋人へ宛てた手紙について記事を書いていますが、今回私はアインシュタインがフロイトに宛てた手紙についての記事を書こうと思います。</p>
<p>アインシュタインとフロイト？と思うかもしれませんが、アインシュタインは物理学者としてではなく、平和を愛する一人の人間としてフロイトに、心理学者として戦争は無くなるかどうか、どう思うのかを手紙で問いました。</p>
<p>さあ、内容を紹介しようと思います。</p>
<h2 id="権利と暴力">権利と暴力</h2>
<div class="figure">
<img src="../images/kine_and_abel.jpg" />

</div>
<p>現代では問題解決は暴力を用いずに解決する方法が好まれています。</p>
<p>しかし、未明の時代に人間がものごとを決めるのに用いたのは暴力でした。殴り合いのような純粋な腕力を用いたものから時代が進むにつれて、勝者はより強い武器を持っている者へ、そしてそれらを上手く使いこなす者へと変化していきました。</p>
<p>しかし、単純に強い者が集団の統制権をもっていられるのは、その集団が小さい場合のみです。なぜなら弱い人々でも集合し、団結すれば強い人々に勝つことが出来るからです。これを私達は往々にして「団結は力なり」と言いますね。</p>
<p>こうして強いものの暴力に大して団結して集団は「権利」をうちたてます、そしてそこに「権力」が発生します。権力は団結した人々の暴力で、ときとして剥き出しの暴力を実行します。(たとえば死刑だとか)</p>
<h2 id="より大きな集団">より大きな集団</h2>
<p>戦争を行うと、国々は統一され、集団はより大きくなります。そうして集団が大きくなり、同じ国の国民同士であるという連帯感などで争いは影を潜めます。</p>
<p>なら、世界で一番大きな集団をつくれば良いのです。そう、国際連合です。</p>
<p>国際連合には現在強制力といったものがありません、しかし、各国家は統帥権を国際連合に譲渡すると、争いは無くなるのではないか、とフロイトは述べています。</p>
<h2 id="争いの原因">争いの原因</h2>
<p>アインシュタインは人間には戦争をせざるをえない攻撃衝動があるのではないか、と想像しましたが、フロイトはこれを肯定し、生の欲動、死の欲動を紹介しています。</p>
<p>人間の欲動はエロスとデストルドーという二つの動機に分けられると、フロイトは述べています、それぞれ生の欲動、死の欲動と訳されることが多いようです。</p>
<p>エロスは生を統一し、保存しようとする欲動で、生物の生きようとする努力を代表するもので、性の欲動ともいえるでしょう。死の欲動は、破壊し、殺害しようとする欲動だといえるでしょう。</p>
<blockquote>
エロスの欲動は、生物の生きようとする努力を代表するものです。そして死の欲動が自分の特別な器官の力を使ってその生物の外部に、すなわち対象に向けられるときには、破壊欲動となります。生命体はいわば外部のものを破壊することで、みずからの生命を守ろうとするのです。
</blockquote>
<p>エロスとデストルドーはたがいに混ざり合って作用しているようです、たとえば自己保存欲求はエロス的なものですが、対象に向けられる際は攻撃欲求も活用しなくてはならなくなります。</p>
<h2 id="反戦体質">反戦体質</h2>
<p>さて、人間の本性に攻撃性を認めてしまいました、しかし戦争は無くなるのです。フロイトはいずれ世界中の人が平和を望むようになり、平和でない事に耐えられなくなると述べています。</p>
<p>フロイトは戦争に反対する理由を、希望に満ちた人間の生活を滅ぼしてしまうからだとか、人間の労働の成果である貴重な価値のあるものを破壊するからであると述べていますが、それ以前に人類のうちのいくらかの人間はすでに生理的に戦争を受け付けないようになっていると述べています。</p>
<p>理由はですが、はじめに人間は文明が発達するにつれ、体質が変わってきていると述べています。これは日本の出生率と発展途上国の出生率などを見れば分かると思います。</p>
<p>人間が進化するにつれて理性の力が強くなり、欲動をコントロールしはじめたのです。攻撃的な欲動は内部へ向うように変化してきました、そして人間を戦争にたえられなくしたのです。攻撃的な欲動が内部へ向うようになった事でうつなどの現代病もひきおこされています。</p>
<p>いずれ戦争がなくなるという考えも、あながちユートピア的なものでは無いかもしれません。</p>
<h2 id="結び">結び</h2>
<p>やはりこうやって記事にしようとすると自分が何も理解していない事を思い知ります。</p>
<p>今回は、リビドーとデストルドーの説明を簡単にするために少し文章に無理が出てしまいました。どうか楽しめたことを祈っています。</p>
<p>私も平和であるほうが良いとは思っているのですが、何故かと聞かれると困ってしまうような気がします。生理的に戦争が無理というのは斬新ですね。</p>
<p>いずれ、リビドーとデストルドーについても記事を書きたいと思っています。</p></section>
]]></description>
    <pubDate>Fri, 01 Jul 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/why_war_summary.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>「精神分析入門」紹介</title>
    <link>https://eliza.link/posts/Introductory_Psychoanalysis.html</link>
    <description><![CDATA[<a href="/posts/Introductory_Psychoanalysis.html"><h1>「精神分析入門」紹介</h1>
</a>
<ul class="article_data"><li>  Posted on June 12, 2016</li>

<li> Tags: <a href="/tags/book.html">book</a>, <a href="/tags/kosen14s.html">kosen14s</a></li>
</ul>
<section class="article_text"><blockquote>
はじめに言葉ありき。言葉は神と共にあり、言葉は神であった。 言葉は神と共にあった。 万物は言葉によって成り、言葉によらず成ったものはひとつもなかった。 言葉の内に命があり、命は人を照らす光であった。 その光は闇の中で輝き、闇が光に打ち勝つことはなかった
</blockquote>
<p><em>この記事は<a href="https://kosen14s.github.io/bookclub">Kosen14s読書会</a>にあたって書いたものです。</em></p>
<p>Q. なんでこの本読んだの？</p>
<p>A. 以前から人間の心の動きに興味を持っていたからです、心理学のうちの精神分析学を選んだ事に意図はありません。</p>
<p>この著書は、第1部「錯誤行為」、第2部「夢」、第3部「神経症総論」の三部構成になっています、今回はそのうちの一章と二章を紹介します。</p>
<!--more-->
<p>正直に白状すると絵空事であるようにわたしが考えている部分もあるのですが、この本の内容をまとめておきましょう。</p>
<p>学んだ事についてアウトプットするのは非常に良い事だと私は思うので、是非続きも書きたいと思っています。</p>
<h4 id="治療行為言葉の力">治療行為、言葉の力</h4>
<p>精神分析学的な治療方法は、現代の臨床心理学と大きく異なっています。</p>
<p>現在の精神障害には、薬物療法が行われます。しかし、精神分析学では言葉のやりとり、いわゆる「おしゃべり」が存在するだけなのです。</p>
<p>フロイトの言及を引用すると</p>
<blockquote>
分析治療では、分析を受けるものと医者との間には、言葉のやりとりがあるだけなのです。患者は語ります。過去の体験と現在の印象について物語り、嘆き、その願望や感情をうちあけます。 医師はこれに耳を傾け、患者の思考の動きを指導しようと試み、励まし、その注意を特定の方向に向かわせ、そしていろいろと説明をしてやり、その時に患者が医師のいうことを了解するか、あるいは拒否するか、という反応を観察します。
</blockquote>
<p>ただ話をするだけで、どうして治療になるかという事ですが、これにはフロイト自身がこう述べています。</p>
<blockquote>
言葉はもともと魔術でした。言葉は、今日でもむかしの魔力をまだ充分に保存しています。 われわれは、言葉の力によって他人をよろこばせることもできれば、また、絶望におとしいれることもできます。 言葉は感動を呼び起こし、人間が互いに影響しあうための一般的な手段なのです。 ですから、精神療法において、言葉を手段として用いることを軽視してはならないのです。
</blockquote>
<h4 id="書籍紹介">書籍紹介</h4>
<div class="figure">
<img src="../images/Introductory_Psychoanalysis.jpg" />

</div>
<p>著者は心理学について調べると目にしないことは無い、ジークムント・フロイト(Freud,Sigmund)によるものです。</p>
<p>新潮社の紹介によると</p>
<blockquote>
<p>タブーなき講義録。ど忘れ、言い間違い、白昼夢……抑圧されているのは何か。神経症の時代に必携の書。</p>
精神病の命名と分類に終始していた伝統的精神医学に対し、自由連想の採用という画期的方法によって症状の隠された意味を探る精神分析を創始して、二十世紀文学にも多大な影響を与えたフロイト。本書は、1915年から17年までウィーン大学で一般向けに行われた講義の記録であり、明快な論旨の進め方、啓蒙を目的とした対話的手法で書かれた最適の入門書である。 <a href="http://www.shinchosha.co.jp/book/203805/">新潮社より引用</a>
</blockquote>
<p>との事。</p>
<p>ISBNは978-4-10-203805-5、訳者は高橋義孝氏と下坂幸三氏によるものです。</p>
<h4 id="フロイトについて">フロイトについて</h4>
<blockquote>
（1856-1939）モラビアのフライベルク（現チェコ）生れ。貧しいユダヤ羊毛商人の子。ウィーン大学卒業後、病院勤務、大学講師を経て、ウィーンで開業医となる。人間の心の大部分は無意識の領域であることを発見、従来の催眠治療にかわる、自由連想法による治療技術としての精神分析を確立。その理論は社会的に反発も多かったが、徐々に浸透、20世紀前半の思想界、文学等に与えた影響は測り知れない。主著に『夢判断』『精神分析入門』。ナチスを逃れ亡命先のロンドンで病死。 <a href="http://www.shinchosha.co.jp/book/203805/">新潮社より引用</a>
</blockquote>
<h2 id="精神分析">精神分析</h2>
<div class="figure">
<img src="../images/doctor.jpg" />

</div>
<p>精神分析とは何か、まずはWikipediaでも調べてみましょう。</p>
<blockquote>
精神分析学（せいしんぶんせきがく、英: Psychoanalysis 独: Psychoanalyse）は、ジークムント・フロイトによって創始された人間心理の理論と治療技法の体系を指す。広義には、フロイト以後の分派を含めた理論体系全体も指す。 精神分析学は、人間には無意識の過程が存在し、人の行動は無意識によって左右されるという基本的な仮説に基づいている。 フロイトは、ヒステリー（現在の解離性障害や身体表現性障害）の治療に当たる中で、人は意識することが苦痛であるような欲望を無意識に抑圧することがあり、それが形を変え神経症の症状などの形で表出されると考えた。 そのため、無意識領域に抑圧された葛藤などの内容を自覚し、表面化させて、本人が意識することによって、症状が解消しうるという治療仮説を立てた。 <a href="https://ja.wikipedia.org/wiki/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90%E5%AD%A6">wikipedia - 精神分析学</a>
</blockquote>
<p>困りました、本著の内容が全てまとめられています…</p>
<h2 id="第一章錯誤行為">第一章「錯誤行為」</h2>
<div class="figure">
<img src="../images/distress.jpg" />

</div>
<p>フロイトは錯誤行為(たとえば、言い違い、書き違い、読み違い、聞き違いなど)は心的行為、二つの重なった意図の衝突によって発生すると述べています。</p>
<p>錯誤行為で思いつく、わたしの例を上げてみましょう。</p>
<p>私はサックス奏者で、部活で毎朝ロングトーンを行います。</p>
<p>ロングトーンとは長時間音を鳴らし続ける練習で、これを行った時と行わない時では、断然行ったほうが音が良いです。</p>
<p>この練習はかなり辛く、管楽器で音を鳴らすには息を吹き込み続ける事が必要で、長時間音を鳴らし続けると、頭はグラグラしてくるし、息を安定して吹き続けるための腹筋も力が入らなくなってきます。</p>
<p>この練習を休日は13セット行います。顧問も一緒に練習しているんですが、たまに11セット目の時に12セットだと言ったり、8セット目の時に9セット目だと言ったりします。</p>
<p>顧問は真面目な方なので、辛い練習を頑張ろうとします。 すると、ここで葛藤が発生します。“練習を早く終了させたいという意図”、“練習を続けようという意図”、この二つの重なった意図は衝突し、回数を間違えるという錯誤行為が発生します。</p>
<p>言い間違いのような、つまらない錯誤行為にも意味は存在する、と本書では述べています。</p>
<p>本著で紹介されている、フロイト自身で観察した例も上げておきましょう。</p>
<blockquote>
いつであったか、私は景色の良いドロミーテンで二人のウィーンの女性に会ったのです。彼女達は旅支度でした。私はしばらく道連れとなり、われわれ三人は旅の楽しさや苦しさなどを話し合いました。と、その婦人の一人が、日中をこうやって過ごしていると、いろいろ不愉快な事があると言いだしたのです。「ほんとうに、すこしも楽しくはありませんわ。一日中照りつけられて歩くのですから、ブラウスも肌着も汗びっしょりです」 ところで、こう言いながら一度途中でちょっと口ごもってから、「でも、Hose(ホーゼ)に帰って着替えをすれば…」(Hoseはパンティーという意味)
</blockquote>
<p>この例も非常にシンプルです、婦人は着替えるものを列挙する際、発言を控えておいたパンティーの事を、家(Hause,ハウゼ)と発言しようとした際、音が似ていたため取りちがえてしまったのです。</p>
<h4 id="原因診断">原因診断</h4>
<p>驚くかもしれませんが、本人に聞くのです。</p>
<p>「部長、さっきのキョウソウカイというのは「今日」と「演奏会」が混じったものですか？」 「そうだよ、早く言いおえたくて急いでいたから言葉が混じってしまったんだ。」</p>
<h4 id="一章-結び">一章 結び</h4>
<p>この章でとりあげた錯誤行為はどちらも不快感からの逃避で、これは言い間違いや度忘れだけでなく、怠慢などにもあてはまると本著では述べられています。</p>
<p>現代ならタイプミスなども含まれるんじゃないかと私は思っています。</p>
<p>この章で本当にフロイトが述べたかったのは、錯誤行為には隠れた心的な動向があるという事だけでは無く</p>
<blockquote>
錯誤行為という現象を心の中のいろいろな勢力の角逐のしるしとして捉えること、すなわちときには協力し、ときには対抗しながら、ある目的を目ざして働いているもろもろの意向の現われとみたいのです。われわれは心的現象の力動的な把握を求めているのです。
</blockquote>
<p>錯誤行為という現象で動いている意向は単純な一つのまとまった物ではなく、複数の意向の妥協案だという事です。</p>
<p>ここで一章の紹介は終りです、疑問もいくつかあって、たとえば錯誤行為は全てが葛藤によるものなのか、などです。</p>
<p>いずれ解決しましょう。</p>
<h2 id="二章夢">二章「夢」</h2>
<div class="figure">
<img src="../images/sleep.jpg" />

</div>
<p>歴史上、夢を軽視することは出来ません。「さいは投げられた(もう引き返す事は出来ない、という意味)」と言った事で有名なカエサルは、母アウレリアを犯す夢を見、占い師から「母とは全ての母に当たる『大地』である」と助言を受けたとも言われていますし、本著でアレクサンドロス大王は遠征に出る時はいつも有名な夢占い師をつれていた、と記されています。神話などでも夢が題材のものは少なくありません。</p>
<p>フロイトは夢には意味がある、と述べています。なるほど、もちろん夢には原因があるでしょう、なければこんな不思議はありません。</p>
<p>現代でも夢占いはいたる所でまことしやかに話されています。人を殺す夢を見た人は…、空を飛ぶ夢を見た人は…、しかしフロイトの言う夢には意味がある、は少し意味が違います。</p>
<h4 id="発生">発生</h4>
<blockquote>
<p>一切の夢に共通な第一の点は、夢を見る時にはわれわれが眠っているという事実です。夢を見るということは、明らかにわれわれが眠っている間の心的活動です。 眠っている時は、外界へ関心は向けられていません。眠りの心理学的な性格は現実世界への関心の中断であるようにみえます。</p>
</blockquote>
<p>寝るとき、大抵の人が部屋を暗くして、布団ないし、毛布やそのたぐいのものであたたかくすると思います。</p>
<p>このとき、いやいやながら生まれてきた我々は誕生以前の状態、いわば母胎内の存在に戻る、もしくはそれに近い状態を作り出します。</p>
<p>私はまっすぐと姿勢を良くして布団に入りますが、眠りにつくと丸まり、胎内でとっていた時の同じ姿勢をとっているようです。</p>
<p>私達は夢の無い眠りこそ、最良の眠りとしますが、そうでは無いのです。それどころか夢は眠りを妨げるものではなく、眠りの番人だとフロイトは述べています。</p>
<p>興味深い実験を引用してみましょう。</p>
<blockquote>
夢をみている自分(被験者)にオーデコロンをかがせてもらうと、カイロのヨーハン・マリーア・ファリーナの店にいて、その後ばかばかしい冒険をする夢を見た。次にうなじのところをつねってもらうと、彼は発泡膏を塗られた夢を見、子供の頃に治療をうけた事のある医師がその夢に出てきた。また、額に水滴を垂らすと、彼はイタリアで激しく汗をかきながら白葡萄酒を飲んでいる夢を見ました。
</blockquote>
<p>このような例が複数本著では紹介されています。</p>
<p>このことから、夢は眠りの途中に加えられた刺激に対する解釈だといえるでしょう。</p>
<p>また、刺激は外的なものに限らず、内部たとえば内蔵からの刺激であるかもしれません。</p>
<h4 id="夢を知る">夢を知る</h4>
<p>これは先ほどの錯誤行為の例と同じです。本人に語らせるのです。</p>
<p>しかし、夢は曖昧です。はっきりと思い出せなかったり、内容が変わったりします。</p>
<p>ここで、一度本人が語ったものを夢とすることにしましょう。本人が歪めていたり、忘れていたりすることを考慮しないことにするのです。</p>
<h4 id="思い出す">思い出す</h4>
<p>夢を分析するには、まず思い出さなければなりません。そして、夢は思い出せるものなのです。</p>
<p>その根拠としてフロイトは一つの面白い実験の例をあげています。</p>
<p>催眠状態から覚醒して五分たったら病室で雨傘を拡げよと命じられた被験者は、目が覚めてからこの命令を実行しましたが、自分の行動の動機を報告することはできなかった、というものです。</p>
<p>つぎに、催眠状態中に起こったことを話せと言われた被験者が、初めの間は何も思い出せないと主張していましたが、強く促されると徐々に、そして全て思い出したそうです。</p>
<p>フロイトの夢に対する推測もまったくこれと同じものです。</p>
<p>なぜ夢を忘れるのかということですが、フロイトは日中人間には、良心による検閲が働いていていると述べています。</p>
<p>そしてフロイトは、夢は検閲によって意識されない欲求が、夜に検閲が弱まり視覚化したものだとしています。</p>
<p>また、夢が支離滅裂なのは、検閲が都合の悪いものは隠してしまうからであるとしています。</p>
<h4 id="象徴">象徴</h4>
<p>フロイトは夢は検閲により、たびたび性的なものを象徴に置き換えると述べていて、例えば男性器は木、傘、杖など棒状のものや、体内に侵入して傷つけるという点でメス、槍、刀剣などで象徴するとしています、女性器は中に物を入れられる箱や瓶、溝や筒、子宮の象徴としての戸棚や部屋などが象徴になると述べています。</p>
<p>私は高校生なのでクラスメイトの猥談を良く耳にしますが、そのなかでは陰茎は “棒状のもの” や “伸び縮みするもの” に置き換えられているのを覚えています、こんな一見下らない機知が夢にも適用されていると考えると面白くありませんか？</p>
<p>ただ、フロイトの言う通りに象徴を性的なものに置き替えていくと、今記事を書いてある私の目の前にあるものだけでも、棒状の物だと、万年筆やスプーン、中に空間があり、物が入れられる物も、スピーカーやマグカップにインク瓶など無数にあり違和感を感じます。</p>
<h4 id="解釈">解釈</h4>
<p>さあ、夢の解釈をしてみましょう。方法は錯誤行為と似ています、相手にむかってこう問うのです。「その夢はどういう意味があるのですか？」</p>
<p>相手には、自由ににおもいつく事を話してもらうのです。</p>
<p>フロイトの一節を引用しておきましょう。</p>
<blockquote>
その夢がなにを意味しているのかを知っているはずです。ただ自分が夢の意味を知っているということを知らないのであって、自分が知らないと信じているだけなのだということです。
</blockquote>
<p>夢を解釈する方法はシンプルで、夢の中でおこった事から思いつく事を自由に纏めていけば良いのです。</p>
<p>ただ、少しだけルールがあって、どんな下らない事や、それは違うな、と思った事を無視してはいけません。</p>
<p>何故なら、前述の通り夢は内容を検閲してあるからです。</p>
<blockquote>
<p>忘れるのは、忘れたいからであり、抵抗を生む内容こそ裏があるからです。</p>
</blockquote>
<h4 id="意識">意識</h4>
<p>心には自分でも関与できない部分がある事が感じられましたか？</p>
<p>フロイトは本著で心の構造には三種類あって、意識、前意識、無意識に分類されると述べています。</p>
<div class="figure">
<img src="../images/mind.jpg" alt="サブリミナル・インパクト（ちくま書房）より引用" />
<p class="caption">サブリミナル・インパクト（ちくま書房）より引用</p>
</div>
<p>聞きなれない、前意識という単語が登場しました、普段は無意識の領域にあるけれど、努力すれば意識に登るといった領域の事です。</p>
<p>私はよくウトウトしている時にすばらしいアルゴリズムがひらめくのですが、このウトウトしている時は前意識が意識にのぼりやすい瞬間で、偉人の発明にも似たような例を聞いた事があります。</p>
<h4 id="二章-結び">二章 結び</h4>
<p>本の内容を纏めただけになってしまいました、また、端折った部分もものすごい範囲に及びます…</p>
<p>三章もテスト期間が終わればまとめて追記してみようと思います。</p>
<p>今回はあまり紹介できなかったけど、本著は実例も多く紹介されてあって非常に面白いです、一度手にとってみて下さい。</p>
<h2 id="おわりに">おわりに</h2>
<div class="figure">
<img src="../images/drag.jpg" />

</div>
<p>この本で紹介されている錯誤行為一つをとっても、意識して暮らすと面白いものがありました、人間って面白いですよね。</p>
<p>わたしの専門科目を担当している某教師は、授業中、しばしば基礎的なある単語をほかの単語と取り違え、少ししてから自分で気づき訂正します。</p>
<p>なにか葛藤があるんでしょうか、気になるところです、本人に聞いてみましょうか。</p>
<p>さて、手元にはおもしろそうな本はまだ山のように積まれています。何から手をつけよう。</p></section>
]]></description>
    <pubDate>Sun, 12 Jun 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/Introductory_Psychoanalysis.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>
<item>
    <title>Kosen14sとは…？</title>
    <link>https://eliza.link/posts/kosen14s.html</link>
    <description><![CDATA[<a href="/posts/kosen14s.html"><h1>Kosen14sとは…？</h1>
</a>
<ul class="article_data"><li>  Posted on May  4, 2016</li>

<li> Tags: <a href="/tags/kosen14s.html">kosen14s</a></li>
</ul>
<section class="article_text"><p><a href="./2016-05-02-kosenconflol.html">以前高専カンファレンスに行って来た</a>のですが、そこで<a href="https://twitter.com/kwnktks0515">かわなか氏/kwnktks0515</a>によりkosen14sに招待していただきました。</p>
<p>Kosen14sとは何か、私には分かりません、共通点は2014年に高専に入学したという事ぐらいです。</p>
<p>筋トレ集団のようにも見えますし、エンジニア集団にも見えます、<a href="https://twitter.com/Macshaker">マックシェイカー</a>も居れば、<a href="https://twitter.com/nyousono_sakebi">吹奏楽関係者</a>も居ます。</p>
<p>年齢の近い、高専生やその近辺の集まりなので、皆と結構フレンドリーに話せます。</p>
<!--more-->
<h2 id="筋トレ">筋トレ？</h2>
<p>筋トレです、kosenconf lolでの発表(おそらく<a href="https://twitter.com/e10dokup">神大クソメガネ先輩</a>)の「大切なことは筋肉」発言が原因です。</p>
<div class="figure">
<img src="../images/kosen14s-muscle.png" />

</div>
<p>みんな喜んで筋トレしています、私も一ヶ月続けたので腕が少し太くなりました。</p>
<p>ちなみに、我らがkosen14sのGithubリポジトリには、<a href="https://github.com/kosen14s/muscle_training_bot">muscle_training_bot</a>なるものがあります、完全に変態です。</p>
<h2 id="読書会を行います">読書会を行います</h2>
<blockquote>
いらいざ ‏<span class="citation">@Eliza_0x</span> 6月12日 #kosen14s では6/20より一週間に渡って読書会を開催します！ 各kosen14sメンバーが担当日にブログやスライドなどで読んだ本(ジャンルは問わない)についての発表を行ってくれるので楽しみに待っていて下さい！ -<a href="https://twitter.com/Eliza_0x/status/741970838707011584">twitter</a>
</blockquote>
<p>行いました、私も二本記事を書きました。: <a href="http://kosen14s.github.io/bookclub/">Kosen14s読書会</a></p>
<h2 id="興味がある">興味がある</h2>
<p><a href="https://twitter.com/kwnktks0515">かわなか氏/kwnktks0515</a>に連絡を取って下さい</p></section>
]]></description>
    <pubDate>Wed, 04 May 2016 00:00:00 UT</pubDate>
    <guid>https://eliza.link/posts/kosen14s.html</guid>
    <dc:creator>eliza0x</dc:creator>
</item>

    </channel>
</rss>
